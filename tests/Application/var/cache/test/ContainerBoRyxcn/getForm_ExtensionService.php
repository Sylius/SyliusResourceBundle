<?php

namespace ContainerBoRyxcn;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getForm_ExtensionService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'form.extension' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormExtensionInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';

        return $container->privates['form.extension'] = new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'App\\BoardGameBlog\\Infrastructure\\Symfony\\Form\\Type\\BoardGameType' => ['privates', 'App\\BoardGameBlog\\Infrastructure\\Symfony\\Form\\Type\\BoardGameType', 'getBoardGameTypeService', true],
            'App\\Form\\Type\\BookTranslationType' => ['privates', 'app.form.type.book_translation', 'getApp_Form_Type_BookTranslationService', true],
            'App\\Form\\Type\\BookType' => ['privates', 'app.form.type.book', 'getApp_Form_Type_BookService', true],
            'App\\Form\\Type\\ScienceBookType' => ['privates', 'app.form.type.science_book', 'getApp_Form_Type_ScienceBookService', true],
            'App\\Subscription\\Form\\Type\\SubscriptionType' => ['privates', 'App\\Subscription\\Form\\Type\\SubscriptionType', 'getSubscriptionTypeService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\BooleanFilterType' => ['services', 'sylius.form.type.grid_filter.boolean', 'getSylius_Form_Type_GridFilter_BooleanService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\DateFilterType' => ['services', 'sylius.form.type.grid_filter.date', 'getSylius_Form_Type_GridFilter_DateService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\EntityFilterType' => ['services', 'sylius.form.type.grid_filter.entity', 'getSylius_Form_Type_GridFilter_EntityService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\ExistsFilterType' => ['services', 'sylius.form.type.grid_filter.exists', 'getSylius_Form_Type_GridFilter_ExistsService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\SelectFilterType' => ['services', 'sylius.form.type.grid_filter.select', 'getSylius_Form_Type_GridFilter_SelectService', true],
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\StringFilterType' => ['services', 'sylius.form.type.grid_filter.string', 'getSylius_Form_Type_GridFilter_StringService', true],
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType' => ['services', 'sylius.form.type.default', 'getSylius_Form_Type_DefaultService', true],
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceAutocompleteChoiceType' => ['services', 'sylius.form.type.resource_autocomplete_choice', 'getSylius_Form_Type_ResourceAutocompleteChoiceService', true],
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceTranslationsType' => ['services', 'sylius.form.type.resource_translations', 'getSylius_Form_Type_ResourceTranslationsService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['privates', 'form.type.file', 'getForm_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'App\\BoardGameBlog\\Infrastructure\\Symfony\\Form\\Type\\BoardGameType' => '?',
            'App\\Form\\Type\\BookTranslationType' => '?',
            'App\\Form\\Type\\BookType' => '?',
            'App\\Form\\Type\\ScienceBookType' => '?',
            'App\\Subscription\\Form\\Type\\SubscriptionType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\BooleanFilterType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\DateFilterType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\EntityFilterType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\ExistsFilterType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\SelectFilterType' => '?',
            'Sylius\\Bundle\\GridBundle\\Form\\Type\\Filter\\StringFilterType' => '?',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType' => '?',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceAutocompleteChoiceType' => '?',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceTranslationsType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.form.transformation_failure_handling'] ?? $container->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($container->privates['form.type_extension.form.http_foundation'] ?? $container->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($container->privates['form.type_extension.form.validator'] ?? $container->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($container->privates['form.type_extension.upload.validator'] ?? $container->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($container->privates['form.type_extension.csrf'] ?? $container->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($container->privates['form.type_extension.form.password_hasher'] ?? $container->load('getForm_TypeExtension_Form_PasswordHasherService'));
        }, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.repeated.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.submit.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.password.password_hasher'] ?? $container->load('getForm_TypeExtension_Password_PasswordHasherService'));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['sylius.form.extension.type.collection'] ??= new \Sylius\Bundle\ResourceBundle\Form\Extension\CollectionTypeExtension());
        }, 1)], new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_guesser.validator'] ?? $container->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($container->privates['form.type_guesser.doctrine'] ?? $container->load('getForm_TypeGuesser_DoctrineService'));
        }, 2));
    }
}
