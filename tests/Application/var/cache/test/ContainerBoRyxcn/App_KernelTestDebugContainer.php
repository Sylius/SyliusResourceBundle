<?php

namespace ContainerBoRyxcn;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class App_KernelTestDebugContainer extends Container
{
    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain' => 'getResourceMappingDriverChainService',
            'Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRouteNameFactoryInterface' => 'getOperationRouteNameFactoryInterfaceService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'jms_serializer.authorization_checker' => 'getJmsSerializer_AuthorizationCheckerService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'sylius.storage.cookie' => 'getSylius_Storage_CookieService',
            'translator' => 'getTranslatorService',
            'pagerfanta.route_generator_factory' => 'getPagerfanta_RouteGeneratorFactoryService',
            'pagerfanta.view_factory' => 'getPagerfanta_ViewFactoryService',
        ];
        $this->fileMap = [
            '.container.private.pagerfanta.route_generator_factory' => 'get_Container_Private_Pagerfanta_RouteGeneratorFactoryService',
            '.container.private.pagerfanta.view_factory' => 'get_Container_Private_Pagerfanta_ViewFactoryService',
            'App\\Controller\\BookController' => 'getBookControllerService',
            'Faker\\Generator' => 'getGeneratorService',
            'SM\\Callback\\CallbackFactoryInterface' => 'getCallbackFactoryInterfaceService',
            'SM\\Callback\\CascadeTransitionCallback' => 'getCascadeTransitionCallbackService',
            'SM\\Factory\\FactoryInterface' => 'getFactoryInterfaceService',
            'Sylius\\Bundle\\ResourceBundle\\Routing\\AttributesOperationRouteFactoryInterface' => 'getAttributesOperationRouteFactoryInterfaceService',
            'Sylius\\Bundle\\ResourceBundle\\Routing\\RouteAttributesFactoryInterface' => 'getRouteAttributesFactoryInterfaceService',
            'Sylius\\Component\\Resource\\Grid\\View\\Factory\\GridViewFactoryInterface' => 'getGridViewFactoryInterfaceService',
            'Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRouteFactoryInterface' => 'getOperationRouteFactoryInterfaceService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'Symfony\\Component\\Form\\FormFactoryInterface' => 'getFormFactoryInterfaceService',
            'app.controller.blog_post' => 'getApp_Controller_BlogPostService',
            'app.controller.book' => 'getApp_Controller_BookService',
            'app.controller.book_translation' => 'getApp_Controller_BookTranslationService',
            'app.controller.comic_book' => 'getApp_Controller_ComicBookService',
            'app.controller.gedmo' => 'getApp_Controller_GedmoService',
            'app.controller.pull_request' => 'getApp_Controller_PullRequestService',
            'app.controller.science_book' => 'getApp_Controller_ScienceBookService',
            'app.controller.subscription' => 'getApp_Controller_SubscriptionService',
            'app.factory.blog_post' => 'getApp_Factory_BlogPostService',
            'app.factory.book' => 'getApp_Factory_BookService',
            'app.factory.book_translation' => 'getApp_Factory_BookTranslationService',
            'app.factory.comic_book' => 'getApp_Factory_ComicBookService',
            'app.factory.gedmo' => 'getApp_Factory_GedmoService',
            'app.factory.pull_request' => 'getApp_Factory_PullRequestService',
            'app.factory.science_book' => 'getApp_Factory_ScienceBookService',
            'app.factory.subscription' => 'getApp_Factory_SubscriptionService',
            'app.repository.blog_post' => 'getApp_Repository_BlogPostService',
            'app.repository.book' => 'getApp_Repository_BookService',
            'app.repository.book_translation' => 'getApp_Repository_BookTranslationService',
            'app.repository.comic_book' => 'getApp_Repository_ComicBookService',
            'app.repository.gedmo' => 'getApp_Repository_GedmoService',
            'app.repository.pull_request' => 'getApp_Repository_PullRequestService',
            'app.repository.science_book' => 'getApp_Repository_ScienceBookService',
            'app.repository.subscription' => 'getApp_Repository_SubscriptionService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'error_controller' => 'getErrorControllerService',
            'fidry_alice_data_fixtures.loader.doctrine' => 'getFidryAliceDataFixtures_Loader_DoctrineService',
            'fidry_alice_data_fixtures.persistence.persister.doctrine' => 'getFidryAliceDataFixtures_Persistence_Persister_DoctrineService',
            'fidry_alice_data_fixtures.persistence.purger_factory.doctrine' => 'getFidryAliceDataFixtures_Persistence_PurgerFactory_DoctrineService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'hateoas.configuration.metadata_driver' => 'getHateoas_Configuration_MetadataDriverService',
            'hateoas.configuration.provider' => 'getHateoas_Configuration_ProviderService',
            'hateoas.event_listener.json' => 'getHateoas_EventListener_JsonService',
            'hateoas.event_listener.xml' => 'getHateoas_EventListener_XmlService',
            'hateoas.generator.registry' => 'getHateoas_Generator_RegistryService',
            'hateoas.helper.link' => 'getHateoas_Helper_LinkService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'nelmio_alice.data_loader' => 'getNelmioAlice_DataLoaderService',
            'nelmio_alice.file_loader' => 'getNelmioAlice_FileLoaderService',
            'nelmio_alice.files_loader' => 'getNelmioAlice_FilesLoaderService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'services_resetter' => 'getServicesResetterService',
            'sylius.console.command.resource_debug' => 'getSylius_Console_Command_ResourceDebugService',
            'sylius.custom_bulk_action_grid_renderer.twig' => 'getSylius_CustomBulkActionGridRenderer_TwigService',
            'sylius.custom_grid_renderer.twig' => 'getSylius_CustomGridRenderer_TwigService',
            'sylius.event_subscriber.orm_mapped_super_class' => 'getSylius_EventSubscriber_OrmMappedSuperClassService',
            'sylius.event_subscriber.orm_repository_class' => 'getSylius_EventSubscriber_OrmRepositoryClassService',
            'sylius.form.extension.type.collection' => 'getSylius_Form_Extension_Type_CollectionService',
            'sylius.form.type.default' => 'getSylius_Form_Type_DefaultService',
            'sylius.form.type.grid_filter.boolean' => 'getSylius_Form_Type_GridFilter_BooleanService',
            'sylius.form.type.grid_filter.date' => 'getSylius_Form_Type_GridFilter_DateService',
            'sylius.form.type.grid_filter.entity' => 'getSylius_Form_Type_GridFilter_EntityService',
            'sylius.form.type.grid_filter.exists' => 'getSylius_Form_Type_GridFilter_ExistsService',
            'sylius.form.type.grid_filter.select' => 'getSylius_Form_Type_GridFilter_SelectService',
            'sylius.form.type.grid_filter.string' => 'getSylius_Form_Type_GridFilter_StringService',
            'sylius.form.type.resource_autocomplete_choice' => 'getSylius_Form_Type_ResourceAutocompleteChoiceService',
            'sylius.form.type.resource_translations' => 'getSylius_Form_Type_ResourceTranslationsService',
            'sylius.grid.array_grid_provider' => 'getSylius_Grid_ArrayGridProviderService',
            'sylius.grid.array_to_definition_converter' => 'getSylius_Grid_ArrayToDefinitionConverterService',
            'sylius.grid.chain_provider' => 'getSylius_Grid_ChainProviderService',
            'sylius.grid.configuration_extender' => 'getSylius_Grid_ConfigurationExtenderService',
            'sylius.grid.configuration_removals_handler' => 'getSylius_Grid_ConfigurationRemovalsHandlerService',
            'sylius.grid.data_extractor.property_access' => 'getSylius_Grid_DataExtractor_PropertyAccessService',
            'sylius.grid.data_provider' => 'getSylius_Grid_DataProviderService',
            'sylius.grid.data_source_provider' => 'getSylius_Grid_DataSourceProviderService',
            'sylius.grid.field.validator' => 'getSylius_Grid_Field_ValidatorService',
            'sylius.grid.filters_applicator' => 'getSylius_Grid_FiltersApplicatorService',
            'sylius.grid.filters_criteria_resolver' => 'getSylius_Grid_FiltersCriteriaResolverService',
            'sylius.grid.grid_registry' => 'getSylius_Grid_GridRegistryService',
            'sylius.grid.resource_view_factory' => 'getSylius_Grid_ResourceViewFactoryService',
            'sylius.grid.service_grid_provider' => 'getSylius_Grid_ServiceGridProviderService',
            'sylius.grid.sorter' => 'getSylius_Grid_SorterService',
            'sylius.grid.sorter.validator' => 'getSylius_Grid_Sorter_ValidatorService',
            'sylius.grid.view_factory' => 'getSylius_Grid_ViewFactoryService',
            'sylius.grid_driver.doctrine.dbal' => 'getSylius_GridDriver_Doctrine_DbalService',
            'sylius.grid_driver.doctrine.orm' => 'getSylius_GridDriver_Doctrine_OrmService',
            'sylius.grid_field.datetime' => 'getSylius_GridField_DatetimeService',
            'sylius.grid_field.string' => 'getSylius_GridField_StringService',
            'sylius.grid_field.twig' => 'getSylius_GridField_TwigService',
            'sylius.grid_filter.boolean' => 'getSylius_GridFilter_BooleanService',
            'sylius.grid_filter.date' => 'getSylius_GridFilter_DateService',
            'sylius.grid_filter.entity' => 'getSylius_GridFilter_EntityService',
            'sylius.grid_filter.exists' => 'getSylius_GridFilter_ExistsService',
            'sylius.grid_filter.select' => 'getSylius_GridFilter_SelectService',
            'sylius.grid_filter.string' => 'getSylius_GridFilter_StringService',
            'sylius.random_generator' => 'getSylius_RandomGeneratorService',
            'sylius.registry.grid_driver' => 'getSylius_Registry_GridDriverService',
            'sylius.registry.grid_field' => 'getSylius_Registry_GridFieldService',
            'sylius.registry.grid_filter' => 'getSylius_Registry_GridFilterService',
            'sylius.resource_controller.resources_resolver.grid_aware' => 'getSylius_ResourceController_ResourcesResolver_GridAwareService',
            'sylius.routing.factory.operation_route_path_factory.bulk_operation' => 'getSylius_Routing_Factory_OperationRoutePathFactory_BulkOperationService',
            'sylius.routing.factory.operation_route_path_factory.collection' => 'getSylius_Routing_Factory_OperationRoutePathFactory_CollectionService',
            'sylius.routing.factory.operation_route_path_factory.create' => 'getSylius_Routing_Factory_OperationRoutePathFactory_CreateService',
            'sylius.routing.factory.operation_route_path_factory.delete' => 'getSylius_Routing_Factory_OperationRoutePathFactory_DeleteService',
            'sylius.routing.factory.operation_route_path_factory.show' => 'getSylius_Routing_Factory_OperationRoutePathFactory_ShowService',
            'sylius.routing.factory.operation_route_path_factory.update' => 'getSylius_Routing_Factory_OperationRoutePathFactory_UpdateService',
            'sylius.routing.redirect_handler' => 'getSylius_Routing_RedirectHandlerService',
            'sylius.storage.session' => 'getSylius_Storage_SessionService',
            'sylius.templating.helper.bulk_action_grid' => 'getSylius_Templating_Helper_BulkActionGridService',
            'sylius.templating.helper.grid' => 'getSylius_Templating_Helper_GridService',
            'sylius.translatable_entity_locale_assigner' => 'getSylius_TranslatableEntityLocaleAssignerService',
            'sylius.translation.translatable_listener.doctrine.orm' => 'getSylius_Translation_TranslatableListener_Doctrine_OrmService',
            'sylius.translation_locale_provider' => 'getSylius_TranslationLocaleProviderService',
            'sylius.translation_locale_provider.immutable' => 'getSylius_TranslationLocaleProvider_ImmutableService',
            'test.client' => 'getTest_ClientService',
            'test.custom_book_factory' => 'getTest_CustomBookFactoryService',
            'test.custom_book_repository' => 'getTest_CustomBookRepositoryService',
            'test.private_services_locator' => 'getTest_PrivateServicesLocatorService',
            'test.service_container' => 'getTest_ServiceContainerService',
            'twig' => 'getTwigService',
        ];
        $this->aliases = [
            'App\\Kernel' => 'kernel',
            'Sylius\\Bundle\\GridBundle\\Registry\\GridRegistryInterface' => 'sylius.grid.grid_registry',
            'Sylius\\Bundle\\ResourceBundle\\Command\\DebugResourceCommand' => 'sylius.console.command.resource_debug',
            'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourcesResolverInterface' => 'sylius.resource_controller.resources_resolver.grid_aware',
            'Sylius\\Bundle\\ResourceBundle\\EventListener\\ORMMappedSuperClassSubscriber' => 'sylius.event_subscriber.orm_mapped_super_class',
            'Sylius\\Bundle\\ResourceBundle\\EventListener\\ORMRepositoryClassSubscriber' => 'sylius.event_subscriber.orm_repository_class',
            'Sylius\\Bundle\\ResourceBundle\\EventListener\\ORMTranslatableListener' => 'sylius.translation.translatable_listener.doctrine.orm',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Extension\\CollectionTypeExtension' => 'sylius.form.extension.type.collection',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType' => 'sylius.form.type.default',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceAutocompleteChoiceType' => 'sylius.form.type.resource_autocomplete_choice',
            'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\ResourceTranslationsType' => 'sylius.form.type.resource_translations',
            'Sylius\\Bundle\\ResourceBundle\\Grid\\Renderer\\TwigBulkActionGridRenderer' => 'sylius.custom_bulk_action_grid_renderer.twig',
            'Sylius\\Bundle\\ResourceBundle\\Grid\\Renderer\\TwigGridRenderer' => 'sylius.custom_grid_renderer.twig',
            'Sylius\\Bundle\\ResourceBundle\\Grid\\View\\ResourceGridViewFactoryInterface' => 'sylius.grid.resource_view_factory',
            'Sylius\\Bundle\\ResourceBundle\\Storage\\CookieStorage' => 'sylius.storage.cookie',
            'Sylius\\Bundle\\ResourceBundle\\Storage\\SessionStorage' => 'sylius.storage.session',
            'Sylius\\Component\\Grid\\Configuration\\GridConfigurationExtenderInterface' => 'sylius.grid.configuration_extender',
            'Sylius\\Component\\Grid\\Configuration\\GridConfigurationRemovalsHandlerInterface' => 'sylius.grid.configuration_removals_handler',
            'Sylius\\Component\\Resource\\Generator\\RandomnessGeneratorInterface' => 'sylius.random_generator',
            'Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRoutePathFactoryInterface' => 'sylius.routing.factory.operation_route_path_factory.create',
            'Sylius\\Component\\Resource\\Symfony\\Routing\\RedirectHandlerInterface' => 'sylius.routing.redirect_handler',
            'Sylius\\Component\\Resource\\Translation\\Provider\\ImmutableTranslationLocaleProvider' => 'sylius.translation_locale_provider.immutable',
            'Sylius\\Component\\Resource\\Translation\\TranslatableEntityLocaleAssignerInterface' => 'sylius.translatable_entity_locale_assigner',
            'app.manager.blog_post' => 'doctrine.orm.default_entity_manager',
            'app.manager.book' => 'doctrine.orm.default_entity_manager',
            'app.manager.book_translation' => 'doctrine.orm.default_entity_manager',
            'app.manager.comic_book' => 'doctrine.orm.default_entity_manager',
            'app.manager.gedmo' => 'doctrine.orm.default_entity_manager',
            'app.manager.pull_request' => 'doctrine.orm.default_entity_manager',
            'app.manager.science_book' => 'doctrine.orm.default_entity_manager',
            'app.manager.subscription' => 'doctrine.orm.default_entity_manager',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'sm.callback.cascade_transition' => 'SM\\Callback\\CascadeTransitionCallback',
            'sm.callback_factory' => 'SM\\Callback\\CallbackFactoryInterface',
            'sm.factory' => 'SM\\Factory\\FactoryInterface',
            'sylius.grid.bulk_action_renderer.twig' => 'sylius.custom_bulk_action_grid_renderer.twig',
            'sylius.grid.provider' => 'sylius.grid.chain_provider',
            'sylius.grid.renderer.twig' => 'sylius.custom_grid_renderer.twig',
            'sylius.grid.view_factory.resource' => 'Sylius\\Component\\Resource\\Grid\\View\\Factory\\GridViewFactoryInterface',
            'sylius.routing.factory.operation_route_path_factory' => 'sylius.routing.factory.operation_route_path_factory.create',
            'sylius_resource.doctrine.mapping_driver_chain' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain',
        ];

        $this->privates['service_container'] = static function ($container) {
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/AbstractLogger.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/NullLogger.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/DisallowRobotsIndexingListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/CacheAttributeListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ResetInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/expression-language/ExpressionFunctionProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/ExpressionLanguageProvider.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/Reader.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationReader.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/PsrCachedReader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/ProxyTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/PhpArrayAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-access/PropertyAccessorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-access/PropertyAccessor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/SerializerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/NormalizerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ContextAwareNormalizerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DenormalizerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ContextAwareDenormalizerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/EncoderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/ContextAwareEncoderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/DecoderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/ContextAwareDecoderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Serializer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorFromClassMetadata.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/CacheableSupportsMethodInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ConstraintViolationListNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DateTimeZoneNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DateIntervalNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DataUriNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DateTimeNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/SerializerAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ObjectToPopulateTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/SerializerAwareTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/AbstractNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/JsonSerializableNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/UnwrappingDenormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/UidNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/FormErrorNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/AbstractObjectNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ObjectNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/ArrayDenormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Loader/LoaderChain.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Loader/AnnotationLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Factory/ClassResolverTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/NormalizationAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/XmlEncoder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/JsonEncoder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/YamlEncoder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Encoder/CsvEncoder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/NameConverter/NameConverterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/NameConverter/AdvancedNameConverterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/NameConverter/MetadataAwareNameConverter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/BackedEnumNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyDescriptionExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyAccessExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyListExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInitializableExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInfoExtractor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyReadInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyWriteInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/Extractor/ConstructorArgumentTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/Extractor/ReflectionExtractor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/ArrayAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ValidatorBuilder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Validation.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/NormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/messenger/Transport/Serialization/Normalizer/FlattenExceptionNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceSubscriberInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/UsageTrackingTokenStorage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/FirewallMapInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Security/FirewallMap.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Logout/LogoutUrlGenerator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/EventListener/IsGrantedAttributeListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/expression-language/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AccessDecisionManagerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/TraceableAccessDecisionManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/EventListener/FirewallListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Debug/TraceableFirewallListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/FirewallListenerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/AbstractListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/ContextListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/ConnectionFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Tools/DsnParser.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ConnectionRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/AbstractManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/ManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Registry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Schema/SchemaManagerFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Schema/LegacySchemaManagerFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Configuration.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Driver/Middleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Logging/Middleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/ConnectionNameAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/DebugMiddleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/event-manager/src/EventManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/ContainerAwareEventManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Connection.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Middleware/Debug/DebugDataHolder.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/BacktraceDebugDataHolder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ObjectInitializerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Validator/DoctrineInitializer.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/NamingStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/UnderscoreNamingStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/QuoteStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Internal/SQLResultCasing.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/DefaultQuoteStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Configuration.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/FileDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/YamlDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/SimplifiedYamlDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/CompatibilityAnnotationDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/ColocatedMappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/AttributeDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/EntityListenerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/EntityListenerServiceResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/ContainerEntityListenerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/ManagerConfigurator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Validator/DoctrineLoader.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Context/Initiator/RequestContextInitiatorInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Context/Initiator/LegacyRequestContextInitiator.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Controller/ParametersParserInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Controller/ParametersParser.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Controller/RequestConfigurationFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Controller/RequestConfigurationFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventDispatcher/OperationEventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventDispatcher/OperationEventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/ExpressionLanguage/VariablesCollectionInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/ExpressionLanguage/VariablesCollection.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/ExpressionLanguage/ArgumentParserInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/ExpressionLanguage/ArgumentParser.php';
            include_once \dirname(__DIR__, 6).'/vendor/willdurand/negotiation/src/Negotiation/AbstractNegotiator.php';
            include_once \dirname(__DIR__, 6).'/vendor/willdurand/negotiation/src/Negotiation/Negotiator.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventListener/AddFormatListener.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventListener/ReadListener.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventListener/FactoryListener.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/EventListener/DeserializeListener.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/ResourceMetadataCollectionFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/CachedResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Doctrine/Common/Metadata/Resource/Factory/DoctrineResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/RedirectResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/FactoryResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/EventShortNameResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/TemplatesDirResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Operation/HttpOperationInitiatorInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Operation/HttpOperationInitiator.php';
            include_once \dirname(__DIR__, 6).'/src/Component/State/ProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/State/EventDispatcherProvider.php';
            include_once \dirname(__DIR__, 6).'/src/Component/State/FactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/State/Factory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Storage/StorageInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Storage/CookieStorage.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/RegistryInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Registry.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/ExpressionLanguage/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriverChain.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Doctrine/ResourceMappingDriverChain.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Repository/RepositoryFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Bundle/Doctrine/ORM/ContainerRepositoryFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/serializer/Normalizer/NormalizerAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/src/Serializer/Normalizer/PagerfantaNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/Serializer/Normalizer/FormErrorNormalizer.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/Decoder/DecoderProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/Decoder/ContainerDecoderProvider.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/EventListener/BodyListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/EventListener/FormatListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/Negotiation/FormatNegotiator.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/MappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/ChainRequestMatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/RequestMatcher/PathRequestMatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AccessDecisionManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/Strategy/AccessDecisionStrategyInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/Strategy/AffirmativeStrategy.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Context/Initiator/RequestContextInitiator.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Metadata/Resource/Factory/AttributesResourceMetadataCollectionFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Repository/ContainerRepositoryFactory.php';
            include_once \dirname(__DIR__, 6).'/src/Component/State/Provider.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Routing/Router.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/Routing/Factory/OperationRouteNameFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/src/Component/Symfony/Routing/Factory/OperationRouteNameFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AuthorizationCheckerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AuthorizationChecker.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /**
     * Gets the public 'Sylius\Bundle\ResourceBundle\Doctrine\ResourceMappingDriverChain' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ResourceMappingDriverChain
     */
    protected static function getResourceMappingDriverChainService($container)
    {
        return $container->services['Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ResourceMappingDriverChain(($container->privates['Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain.inner'] ?? self::getResourceMappingDriverChain_InnerService($container)), ($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)));
    }

    /**
     * Gets the public 'Sylius\Component\Resource\Symfony\Routing\Factory\OperationRouteNameFactoryInterface' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\Routing\Factory\OperationRouteNameFactory
     */
    protected static function getOperationRouteNameFactoryInterfaceService($container)
    {
        return $container->services['Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRouteNameFactoryInterface'] = new \Sylius\Component\Resource\Symfony\Routing\Factory\OperationRouteNameFactory();
    }

    /**
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_granted_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('bHXqkiXYHS', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()));
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected static function getDoctrineService($container)
    {
        return $container->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($container, $container->parameters['doctrine.connections'], $container->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getDoctrine_Dbal_DefaultConnectionService($container)
    {
        $a = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container));

        if (isset($container->services['doctrine.dbal.default_connection'])) {
            return $container->services['doctrine.dbal.default_connection'];
        }

        return $container->services['doctrine.dbal.default_connection'] = ($container->privates['doctrine.dbal.connection_factory'] ?? self::getDoctrine_Dbal_ConnectionFactoryService($container))->createConnection(['driver' => 'pdo_sqlite', 'path' => (\dirname(__DIR__, 4).'/config/db.sql'), 'charset' => 'UTF8', 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [], 'defaultTableOptions' => []], ($container->privates['doctrine.dbal.default_connection.configuration'] ?? self::getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)), $a, []);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected static function getDoctrine_Orm_DefaultEntityManagerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManagerGhost85163ea', static fn () => \EntityManagerGhost85163ea::createLazyGhost(static fn ($proxy) => self::getDoctrine_Orm_DefaultEntityManagerService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 6).'/vendor/doctrine/common/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ObjectManager.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManagerInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php';

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)), ($container->privates['doctrine.orm.default_configuration'] ?? self::getDoctrine_Orm_DefaultConfigurationService($container)), ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container))) && false ?: $lazyLoad);

        ($container->privates['doctrine.orm.default_manager_configurator'] ??= new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.0', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.0'] ?? self::getSecurity_ContextListener_0Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sylius.listener.add_format', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\AddFormatListener')] fn () => ($container->privates['sylius.listener.add_format'] ?? self::getSylius_Listener_AddFormatService($container)), 'onKernelRequest'], 28);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sylius.listener.read', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\ReadListener')] fn () => ($container->privates['sylius.listener.read'] ?? self::getSylius_Listener_ReadService($container)), 'onKernelRequest'], 4);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sylius.listener.factory', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\FactoryListener')] fn () => ($container->privates['sylius.listener.factory'] ?? self::getSylius_Listener_FactoryService($container)), 'onKernelRequest'], 3);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sylius.listener.deserialize', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\DeserializeListener')] fn () => ($container->privates['sylius.listener.deserialize'] ?? self::getSylius_Listener_DeserializeService($container)), 'onKernelRequest'], 2);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.form', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\FormListener')] fn () => ($container->privates['sylius.listener.form'] ?? $container->load('getSylius_Listener_FormService')), 'onKernelView'], 128);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.validate', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\ValidateListener')] fn () => ($container->privates['sylius.listener.validate'] ?? $container->load('getSylius_Listener_ValidateService')), 'onKernelView'], 64);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.write', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\WriteListener')] fn () => ($container->privates['sylius.listener.write'] ?? $container->load('getSylius_Listener_WriteService')), 'onKernelView'], 32);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.serialize', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\SerializeListener')] fn () => ($container->privates['sylius.listener.serialize'] ?? $container->load('getSylius_Listener_SerializeService')), 'onKernelView'], 16);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.flash', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\FlashListener')] fn () => ($container->privates['sylius.listener.flash'] ?? $container->load('getSylius_Listener_FlashService')), 'onKernelView'], 16);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sylius.listener.respond', class: 'Sylius\\Component\\Resource\\Symfony\\EventListener\\RespondListener')] fn () => ($container->privates['sylius.listener.respond'] ?? $container->load('getSylius_Listener_RespondService')), 'onKernelView'], 8);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'sylius.listener.exception.validation', class: 'Sylius\\Component\\Resource\\Symfony\\Validator\\EventListener\\ValidationExceptionListener')] fn () => ($container->privates['sylius.listener.exception.validation'] ?? $container->load('getSylius_Listener_Exception_ValidationService')), 'onKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'pagerfanta.event_listener.convert_not_valid_max_per_page_to_not_found', class: 'BabDev\\PagerfantaBundle\\EventListener\\ConvertNotValidCurrentPageToNotFoundListener')] fn () => ($container->privates['pagerfanta.event_listener.convert_not_valid_max_per_page_to_not_found'] ??= new \BabDev\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener()), 'onKernelException'], 512);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'pagerfanta.event_listener.convert_not_valid_current_page_to_not_found', class: 'BabDev\\PagerfantaBundle\\EventListener\\ConvertNotValidMaxPerPageToNotFoundListener')] fn () => ($container->privates['pagerfanta.event_listener.convert_not_valid_current_page_to_not_found'] ??= new \BabDev\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener()), 'onKernelException'], 512);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fos_rest.body_listener', class: 'FOS\\RestBundle\\EventListener\\BodyListener')] fn () => ($container->privates['fos_rest.body_listener'] ?? self::getFosRest_BodyListenerService($container)), 'onKernelRequest'], 10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fos_rest.format_listener', class: 'FOS\\RestBundle\\EventListener\\FormatListener')] fn () => ($container->privates['fos_rest.format_listener'] ?? self::getFosRest_FormatListenerService($container)), 'onKernelRequest'], 34);
        $instance->addListener('app.subscription.show', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokeShowEvent'], 0);
        $instance->addListener('app.subscription.index', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokeIndexEvent'], 0);
        $instance->addListener('app.subscription.pre_create', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePreEvent'], 0);
        $instance->addListener('app.subscription.post_create', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePostEvent'], 0);
        $instance->addListener('app.subscription.pre_update', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePreEvent'], 0);
        $instance->addListener('app.subscription.post_update', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePostEvent'], 0);
        $instance->addListener('app.subscription.pre_delete', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePreEvent'], 0);
        $instance->addListener('app.subscription.post_delete', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokePostEvent'], 0);
        $instance->addListener('app.subscription.bulk_delete', [#[\Closure(name: 'App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber')] fn () => ($container->privates['App\\Subscription\\EventSubscriber\\SmokeSubscriptionEventsSubscriber'] ??= new \App\Subscription\EventSubscriber\SmokeSubscriptionEventsSubscriber()), 'smokeBulkEvent'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.response', [#[\Closure(name: 'disallow_search_engine_index_response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DisallowRobotsIndexingListener')] fn () => ($container->privates['disallow_search_engine_index_response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener()), 'onResponse'], -255);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener()), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener()), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.retry.send_failed_message_for_retry_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageForRetryListener')] fn () => ($container->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? $container->load('getMessenger_Retry_SendFailedMessageForRetryListenerService')), 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.add_error_details_stamp_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\AddErrorDetailsStampListener')] fn () => ($container->privates['messenger.failure.add_error_details_stamp_listener'] ??= new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()), 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.dispatch_pcntl_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\DispatchPcntlSignalListener')] fn () => ($container->privates['messenger.listener.dispatch_pcntl_signal_listener'] ??= new \Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener()), 'onWorkerRunning'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_signals_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnSignalsListener')] fn () => ($container->privates['messenger.listener.stop_worker_signals_listener'] ?? $container->load('getMessenger_Listener_StopWorkerSignalsListenerService')), 'onWorkerStarted'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onWorkerRunning'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] fn () => ($container->privates['controller.is_granted_attribute_listener'] ?? self::getController_IsGrantedAttributeListenerService($container)), 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('debug.security.authorization.vote', [#[\Closure(name: 'debug.security.voter.vote_listener', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\VoteListener')] fn () => ($container->privates['debug.security.voter.vote_listener'] ?? $container->load('getDebug_Security_Voter_VoteListenerService')), 'onVoterVote'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageHandledEvent', [#[\Closure(name: 'doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager', class: 'Symfony\\Bridge\\Doctrine\\Messenger\\DoctrineClearEntityManagerWorkerSubscriber')] fn () => ($container->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $container->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService')), 'onWorkerMessageHandled'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager', class: 'Symfony\\Bridge\\Doctrine\\Messenger\\DoctrineClearEntityManagerWorkerSubscriber')] fn () => ($container->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $container->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService')), 'onWorkerMessageFailed'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sylius.storage.cookie', class: 'Sylius\\Bundle\\ResourceBundle\\Storage\\CookieStorage')] fn () => ($container->services['sylius.storage.cookie'] ??= new \Sylius\Bundle\ResourceBundle\Storage\CookieStorage()), 'onKernelRequest'], 1024);
        $instance->addListener('kernel.response', [#[\Closure(name: 'sylius.storage.cookie', class: 'Sylius\\Bundle\\ResourceBundle\\Storage\\CookieStorage')] fn () => ($container->services['sylius.storage.cookie'] ??= new \Sylius\Bundle\ResourceBundle\Storage\CookieStorage()), 'onKernelResponse'], -1024);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? $container->load('getController_TemplateAttributeListenerService')), 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, ($container->privates['controller_resolver'] ?? self::getControllerResolverService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['argument_resolver'] ?? self::getArgumentResolverService($container)), false);
    }

    /**
     * Gets the public 'jms_serializer.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected static function getJmsSerializer_AuthorizationCheckerService($container)
    {
        $a = ($container->privates['debug.security.access.decision_manager'] ?? self::getDebug_Security_Access_DecisionManagerService($container));

        if (isset($container->services['jms_serializer.authorization_checker'])) {
            return $container->services['jms_serializer.authorization_checker'];
        }

        return $container->services['jms_serializer.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a, false, false);
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouterService($container)
    {
        $container->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'kernel::loadRoutes', ['cache_dir' => $container->targetDir.'', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()), 'en_US');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sylius.storage.cookie' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Storage\CookieStorage
     */
    protected static function getSylius_Storage_CookieService($container)
    {
        return $container->services['sylius.storage.cookie'] = new \Sylius\Bundle\ResourceBundle\Storage\CookieStorage();
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        $container->services['translator'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), ($container->privates['translator.formatter.default'] ?? self::getTranslator_Formatter_DefaultService($container)), 'en_US', ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => true, 'resource_files' => ['af' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.af.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ar.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.ar.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.ar.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.ar.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.ar.xliff')], 'az' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.az.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.az.xlf'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.az.xliff')], 'be' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.be.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.be.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.be.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.be.yml')], 'bg' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.bg.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.bg.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.bg.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.bg.yml')], 'bs' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.bs.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ca.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.ca.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.ca.xliff')], 'cs' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.cs.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.cs.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.cs.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.cs.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.cs.xliff')], 'cy' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf')], 'da' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.da.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.da.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.da.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.da.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.da.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.da.xliff')], 'de' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.de.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.de.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.de.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.de.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.de.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.de.xliff')], 'el' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.el.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.el.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.el.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.el.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.el.yml')], 'en' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.en.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.en.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.en.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.en.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.en.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.en.xliff'), (\dirname(__DIR__, 4).'/translations/messages.en.yaml')], 'es' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.es.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.es.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.es.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.es.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.es.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.es.xliff')], 'et' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.et.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.eu.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf')], 'fa' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fa.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.fa.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.fa.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.fa.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.fa.xliff')], 'fi' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fi.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.fi.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.fi.xliff')], 'fr' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.fr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.fr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.fr.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.fr.xliff')], 'gl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.gl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.gl.xliff')], 'he' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.he.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.he.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.he.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.he.yml')], 'hr' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.hr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.hr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.hr.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.hr.xliff')], 'hu' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hu.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.hu.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.hu.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.hu.yml')], 'hy' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hy.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.id.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.id.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.id.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.id.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.id.yml')], 'it' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.it.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.it.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.it.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.it.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.it.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.it.xliff')], 'ja' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ja.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.ja.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.ja.yml')], 'lb' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lb.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lt.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.lt.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.lt.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.lt.yml')], 'lv' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lv.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mn' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.mn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.my.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nb.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.nl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.nl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.nl.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.nl.xliff')], 'nn' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.no.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.no.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.no.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.no.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.no.xliff')], 'pl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.pl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.pl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.pl.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.pl.xliff')], 'pt' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pt.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.pt.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.pt.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.pt.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.pt.xliff')], 'pt_BR' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.pt_BR.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.pt_BR.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.pt_BR.yml')], 'ro' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ro.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.ro.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.ro.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.ro.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.ro.xliff')], 'ru' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ru.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.ru.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.ru.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.ru.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.ru.xliff')], 'sk' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sk.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.sk.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sk.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.sk.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sk.xliff')], 'sl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.sl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sl.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.sl.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sl.xliff')], 'sq' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sq.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.sq.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sq.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.sq.yml')], 'sr_Cyrl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sr_Cyrl.xliff')], 'sr_Latn' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sr_Latn.xliff')], 'sv' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sv.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sv.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sv.xliff')], 'th' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.th.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.th.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.th.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.th.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.th.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.th.xliff')], 'tl' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.tl.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.tr.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.tr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.tr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.tr.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.tr.xliff')], 'uk' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.uk.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.uk.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.uk.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.uk.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.uk.xliff')], 'ur' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ur.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.uz.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.vi.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.zh_CN.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.zh_CN.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.zh_CN.yml'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.zh_CN.xliff')], 'zh_TW' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.zh_TW.xlf'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.zh_TW.yml')], 'de_CH' => [(\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.de_CH.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.de_CH.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.de_CH.yml')], 'sr' => [(\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.sr.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sr.yml')], 'sr_CS' => [(\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/flashes.sr_CS.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/messages.sr_CS.yml'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations/validators.sr_CS.yml')], 'oc' => [(\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.oc.xliff')], 'sw' => [(\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations/pagerfanta.sw.xliff')]], 'scanned_directories' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations'), (\dirname(__DIR__, 4).'/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/security-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/twig-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/willdurand/hateoas-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/theofidry/alice-data-fixtures/src/Bridge/Symfony/translations'), (\dirname(__DIR__, 6).'/vendor/nelmio/alice/src/Bridge/Symfony/translations'), (\dirname(__DIR__, 6).'/vendor/winzou/state-machine-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/sylius/grid-bundle/src/Bundle/translations')], 'cache_vary' => ['scanned_directories' => [(\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations'), (\dirname(__DIR__, 6).'/src/Bundle/Resources/translations'), (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle/translations'), 'translations', (\dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/security-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/symfony/twig-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/willdurand/hateoas-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/theofidry/alice-data-fixtures/src/Bridge/Symfony/translations'), (\dirname(__DIR__, 6).'/vendor/nelmio/alice/src/Bridge/Symfony/translations'), (\dirname(__DIR__, 6).'/vendor/winzou/state-machine-bundle/translations'), (\dirname(__DIR__, 6).'/vendor/sylius/grid-bundle/src/Bundle/translations')]]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->setFallbackLocales(['en_US']);

        return $instance;
    }

    /**
     * Gets the private '.doctrine.orm.default_metadata_driver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver
     */
    protected static function get_Doctrine_Orm_DefaultMetadataDriverService($container)
    {
        return $container->privates['.doctrine.orm.default_metadata_driver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver(($container->services['Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain'] ?? self::getResourceMappingDriverChainService($container)), ($container->privates['.service_locator.KLVvNIq'] ?? self::get_ServiceLocator_KLVvNIqService($container)));
    }

    /**
     * Gets the private '.service_locator.KLVvNIq' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_KLVvNIqService($container)
    {
        return $container->privates['.service_locator.KLVvNIq'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.zJyh7qS' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_ZJyh7qSService($container)
    {
        return $container->privates['.service_locator.zJyh7qS'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.firewall.map.context.dev' => ['privates', 'security.firewall.map.context.dev', 'getSecurity_Firewall_Map_Context_DevService', true],
            'security.firewall.map.context.main' => ['privates', 'security.firewall.map.context.main', 'getSecurity_Firewall_Map_Context_MainService', true],
        ], [
            'security.firewall.map.context.dev' => '?',
            'security.firewall.map.context.main' => '?',
        ]);
    }

    /**
     * Gets the private 'Psr\Log\NullLogger' shared autowired service.
     *
     * @return \Psr\Log\NullLogger
     */
    protected static function getNullLoggerService($container)
    {
        return $container->privates['Psr\\Log\\NullLogger'] = new \Psr\Log\NullLogger();
    }

    /**
     * Gets the private 'Sylius\Bundle\ResourceBundle\Doctrine\ResourceMappingDriverChain.inner' shared service.
     *
     * @return \Doctrine\Persistence\Mapping\Driver\MappingDriverChain
     */
    protected static function getResourceMappingDriverChain_InnerService($container)
    {
        $container->privates['Sylius\\Bundle\\ResourceBundle\\Doctrine\\ResourceMappingDriverChain.inner'] = $instance = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $a = ($container->privates['doctrine.orm.default_attribute_metadata_driver'] ??= new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/src/BoardGameBlog/Domain'), (\dirname(__DIR__, 4).'/src/Subscription/Entity')], false));

        $instance->addDriver(($container->privates['doctrine.orm.default_yml_metadata_driver'] ?? self::getDoctrine_Orm_DefaultYmlMetadataDriverService($container)), 'App\\Entity');
        $instance->addDriver($a, 'App\\BoardGameBlog\\Domain');
        $instance->addDriver($a, 'App\\Subscription\\Entity');

        return $instance;
    }

    /**
     * Gets the private 'annotations.cache_adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected static function getAnnotations_CacheAdapterService($container)
    {
        return $container->privates['annotations.cache_adapter'] = \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/annotations.php'), ($container->privates['cache.annotations'] ?? self::getCache_AnnotationsService($container)));
    }

    /**
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\PsrCachedReader
     */
    protected static function getAnnotations_CachedReaderService($container)
    {
        return $container->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\PsrCachedReader(($container->privates['annotations.reader'] ?? self::getAnnotations_ReaderService($container)), ($container->privates['annotations.cache_adapter'] ?? self::getAnnotations_CacheAdapterService($container)), true);
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected static function getAnnotations_ReaderService($container)
    {
        $container->privates['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required');

        return $instance;
    }

    /**
     * Gets the private 'argument_metadata_factory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory
     */
    protected static function getArgumentMetadataFactoryService($container)
    {
        return $container->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory();
    }

    /**
     * Gets the private 'argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected static function getArgumentResolverService($container)
    {
        return $container->privates['argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user_value_resolver'] ?? $container->load('getSecurity_UserValueResolverService'));
            yield 1 => ($container->privates['security.security_token_value_resolver'] ?? $container->load('getSecurity_SecurityTokenValueResolverService'));
            yield 2 => ($container->privates['doctrine.orm.entity_value_resolver'] ?? $container->load('getDoctrine_Orm_EntityValueResolverService'));
            yield 3 => ($container->privates['argument_resolver.backed_enum_resolver'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver());
            yield 4 => ($container->privates['argument_resolver.datetime'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver(NULL));
            yield 5 => ($container->privates['argument_resolver.request_attribute'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
            yield 6 => ($container->privates['argument_resolver.request'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
            yield 7 => ($container->privates['argument_resolver.session'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
            yield 8 => ($container->privates['argument_resolver.service'] ?? $container->load('getArgumentResolver_ServiceService'));
            yield 9 => ($container->privates['argument_resolver.default'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
            yield 10 => ($container->privates['argument_resolver.variadic'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
        }, 11), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => ['privates', 'doctrine.orm.entity_value_resolver', 'getDoctrine_Orm_EntityValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', 'argument_resolver.backed_enum_resolver', 'getArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', 'argument_resolver.datetime', 'getArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', 'argument_resolver.default', 'getArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', 'argument_resolver.query_parameter_value_resolver', 'getArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', 'argument_resolver.request_attribute', 'getArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', 'argument_resolver.request_payload', 'getArgumentResolver_RequestPayloadService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', 'argument_resolver.request', 'getArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', 'argument_resolver.service', 'getArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', 'argument_resolver.session', 'getArgumentResolver_SessionService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', 'argument_resolver.variadic', 'getArgumentResolver_VariadicService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => ['privates', 'security.security_token_value_resolver', 'getSecurity_SecurityTokenValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => ['privates', 'security.user_value_resolver', 'getSecurity_UserValueResolverService', true],
        ], [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => 'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver',
        ]));
    }

    /**
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = $container->createProxy('RequestPayloadValueResolverGhostB42fd45', static fn () => \RequestPayloadValueResolverGhostB42fd45::createLazyGhost(static fn ($proxy) => self::getArgumentResolver_RequestPayloadService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ValueResolverInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestPayloadValueResolver.php';

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['validator'] ?? self::getValidatorService($container)), ($container->services['translator'] ?? self::getTranslatorService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_AnnotationsService($container)
    {
        return $container->privates['cache.annotations'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('mvBnaBoFov', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()));
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.metadata' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_MetadataService($container)
    {
        return $container->privates['cache.doctrine.orm.default.metadata'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.query' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_QueryService($container)
    {
        return $container->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.result' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_ResultService($container)
    {
        return $container->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_PropertyAccessService($container)
    {
        return $container->privates['cache.property_access'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false);
    }

    /**
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected static function getConfigCacheFactoryService($container)
    {
        return $container->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['dependency_injection.config.container_parameters_resource_checker'] ??= new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($container));
            yield 1 => ($container->privates['config.resource.self_checking_resource_checker'] ??= new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
        }, 2));
    }

    /**
     * Gets the private 'controller.cache_attribute_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener
     */
    protected static function getController_CacheAttributeListenerService($container)
    {
        return $container->privates['controller.cache_attribute_listener'] = new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener();
    }

    /**
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected static function getController_IsGrantedAttributeListenerService($container)
    {
        $a = ($container->services['jms_serializer.authorization_checker'] ?? self::getJmsSerializer_AuthorizationCheckerService($container));

        if (isset($container->privates['controller.is_granted_attribute_listener'])) {
            return $container->privates['controller.is_granted_attribute_listener'];
        }

        return $container->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener($a, ($container->privates['security.is_granted_attribute_expression_language'] ?? self::getSecurity_IsGrantedAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'controller_resolver' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected static function getControllerResolverService($container)
    {
        return $container->privates['controller_resolver'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()));
    }

    /**
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected static function getDebug_DebugHandlersListenerService($container)
    {
        return $container->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener();
    }

    /**
     * Gets the private 'debug.security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager
     */
    protected static function getDebug_Security_Access_DecisionManagerService($container)
    {
        $a = ($container->privates['debug.security.access.decision_manager.inner'] ?? self::getDebug_Security_Access_DecisionManager_InnerService($container));

        if (isset($container->privates['debug.security.access.decision_manager'])) {
            return $container->privates['debug.security.access.decision_manager'];
        }

        return $container->privates['debug.security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager($a);
    }

    /**
     * Gets the private 'debug.security.access.decision_manager.inner' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected static function getDebug_Security_Access_DecisionManager_InnerService($container)
    {
        return $container->privates['debug.security.access.decision_manager.inner'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.debug.security.voter.security.access.authenticated_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_AuthenticatedVoterService'));
            yield 1 => ($container->privates['.debug.security.voter.security.access.simple_role_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_SimpleRoleVoterService'));
            yield 2 => ($container->privates['.debug.security.voter.security.access.expression_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_ExpressionVoterService'));
        }, 3), new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false));
    }

    /**
     * Gets the private 'debug.security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener
     */
    protected static function getDebug_Security_FirewallService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['debug.security.firewall'])) {
            return $container->privates['debug.security.firewall'];
        }

        return $container->privates['debug.security.firewall'] = new \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener(($container->privates['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container)), $a, ($container->privates['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container)));
    }

    /**
     * Gets the private 'disallow_search_engine_index_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener
     */
    protected static function getDisallowSearchEngineIndexResponseListenerService($container)
    {
        return $container->privates['disallow_search_engine_index_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener();
    }

    /**
     * Gets the private 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected static function getDoctrine_Dbal_ConnectionFactoryService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types'], ($container->privates['doctrine.dbal.connection_factory.dsn_parser'] ?? self::getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)));
    }

    /**
     * Gets the private 'doctrine.dbal.connection_factory.dsn_parser' shared service.
     *
     * @return \Doctrine\DBAL\Tools\DsnParser
     */
    protected static function getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory.dsn_parser'] = new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite']);
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.configuration' shared service.
     *
     * @return \Doctrine\DBAL\Configuration
     */
    protected static function getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)
    {
        $container->privates['doctrine.dbal.default_connection.configuration'] = $instance = new \Doctrine\DBAL\Configuration();

        $a = new \Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware(($container->privates['doctrine.debug_data_holder'] ??= new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([])), NULL);
        $a->setConnectionName('default');

        $instance->setSchemaManagerFactory(($container->privates['doctrine.dbal.legacy_schema_manager_factory'] ??= new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory()));
        $instance->setMiddlewares([new \Doctrine\DBAL\Logging\Middleware(($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger())), $a]);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected static function getDoctrine_Dbal_DefaultConnection_EventManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Gedmo\\Sortable\\SortableListener' => ['privates', 'Gedmo\\Sortable\\SortableListener', 'getSortableListenerService', true],
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaListenerService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaListenerService', true],
            'doctrine.orm.listeners.lock_store_schema_listener' => ['privates', 'doctrine.orm.listeners.lock_store_schema_listener', 'getDoctrine_Orm_Listeners_LockStoreSchemaListenerService', true],
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => ['privates', 'doctrine.orm.listeners.pdo_session_handler_schema_listener', 'getDoctrine_Orm_Listeners_PdoSessionHandlerSchemaListenerService', true],
            'doctrine.orm.listeners.resolve_target_entity' => ['privates', 'doctrine.orm.listeners.resolve_target_entity', 'getDoctrine_Orm_Listeners_ResolveTargetEntityService', true],
            'doctrine.orm.messenger.doctrine_schema_listener' => ['privates', 'doctrine.orm.messenger.doctrine_schema_listener', 'getDoctrine_Orm_Messenger_DoctrineSchemaListenerService', true],
            'sylius.event_subscriber.orm_mapped_super_class' => ['services', 'sylius.event_subscriber.orm_mapped_super_class', 'getSylius_EventSubscriber_OrmMappedSuperClassService', true],
            'sylius.event_subscriber.orm_repository_class' => ['services', 'sylius.event_subscriber.orm_repository_class', 'getSylius_EventSubscriber_OrmRepositoryClassService', true],
            'sylius.translation.translatable_listener.doctrine.orm' => ['services', 'sylius.translation.translatable_listener.doctrine.orm', 'getSylius_Translation_TranslatableListener_Doctrine_OrmService', true],
        ], [
            'Gedmo\\Sortable\\SortableListener' => '?',
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => '?',
            'doctrine.orm.listeners.lock_store_schema_listener' => '?',
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => '?',
            'doctrine.orm.listeners.resolve_target_entity' => '?',
            'doctrine.orm.messenger.doctrine_schema_listener' => '?',
            'sylius.event_subscriber.orm_mapped_super_class' => '?',
            'sylius.event_subscriber.orm_repository_class' => '?',
            'sylius.translation.translatable_listener.doctrine.orm' => '?',
        ]), ['sylius.event_subscriber.orm_mapped_super_class', 'sylius.event_subscriber.orm_repository_class', 'sylius.translation.translatable_listener.doctrine.orm', 'Gedmo\\Sortable\\SortableListener', 'doctrine.orm.listeners.resolve_target_entity', [['postGenerateSchema'], 'doctrine.orm.messenger.doctrine_schema_listener'], [['onSchemaCreateTable'], 'doctrine.orm.messenger.doctrine_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_token_provider_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.pdo_session_handler_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.lock_store_schema_listener'], [['loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners']]);
    }

    /**
     * Gets the private 'doctrine.dbal.legacy_schema_manager_factory' shared service.
     *
     * @return \Doctrine\DBAL\Schema\LegacySchemaManagerFactory
     */
    protected static function getDoctrine_Dbal_LegacySchemaManagerFactoryService($container)
    {
        return $container->privates['doctrine.dbal.legacy_schema_manager_factory'] = new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory();
    }

    /**
     * Gets the private 'doctrine.debug_data_holder' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder
     */
    protected static function getDoctrine_DebugDataHolderService($container)
    {
        return $container->privates['doctrine.debug_data_holder'] = new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([]);
    }

    /**
     * Gets the private 'doctrine.orm.default_attribute_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\AttributeDriver
     */
    protected static function getDoctrine_Orm_DefaultAttributeMetadataDriverService($container)
    {
        return $container->privates['doctrine.orm.default_attribute_metadata_driver'] = new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/src/BoardGameBlog/Domain'), (\dirname(__DIR__, 4).'/src/Subscription/Entity')], false);
    }

    /**
     * Gets the private 'doctrine.orm.default_configuration' shared service.
     *
     * @return \Doctrine\ORM\Configuration
     */
    protected static function getDoctrine_Orm_DefaultConfigurationService($container)
    {
        $container->privates['doctrine.orm.default_configuration'] = $instance = new \Doctrine\ORM\Configuration();

        $instance->setEntityNamespaces(['App' => 'App\\Entity', 'BoardGameBlog' => 'App\\BoardGameBlog\\Domain', 'Subscription' => 'App\\Subscription\\Entity']);
        $instance->setMetadataCache(($container->privates['cache.doctrine.orm.default.metadata'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setQueryCache(($container->privates['cache.doctrine.orm.default.query'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setResultCache(($container->privates['cache.doctrine.orm.default.result'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setMetadataDriverImpl(($container->privates['.doctrine.orm.default_metadata_driver'] ?? self::get_Doctrine_Orm_DefaultMetadataDriverService($container)));
        $instance->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $instance->setProxyNamespace('Proxies');
        $instance->setAutoGenerateProxyClasses(true);
        $instance->setSchemaIgnoreClasses([]);
        $instance->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $instance->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $instance->setNamingStrategy(($container->privates['doctrine.orm.naming_strategy.underscore_number_aware'] ??= new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true)));
        $instance->setQuoteStrategy(($container->privates['doctrine.orm.quote_strategy.default'] ??= new \Doctrine\ORM\Mapping\DefaultQuoteStrategy()));
        $instance->setEntityListenerResolver(($container->privates['doctrine.orm.default_entity_listener_resolver'] ??= new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container)));
        $instance->setLazyGhostObjectEnabled(false);
        $instance->setRepositoryFactory(($container->privates['sylius.doctrine.orm.container_repository_factory'] ?? self::getSylius_Doctrine_Orm_ContainerRepositoryFactoryService($container)));

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver
     */
    protected static function getDoctrine_Orm_DefaultEntityListenerResolverService($container)
    {
        return $container->privates['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container);
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_manager.validator_loader' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineLoader
     */
    protected static function getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['doctrine.orm.default_entity_manager.validator_loader'])) {
            return $container->privates['doctrine.orm.default_entity_manager.validator_loader'];
        }

        return $container->privates['doctrine.orm.default_entity_manager.validator_loader'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader($a, NULL);
    }

    /**
     * Gets the private 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected static function getDoctrine_Orm_DefaultManagerConfiguratorService($container)
    {
        return $container->privates['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []);
    }

    /**
     * Gets the private 'doctrine.orm.default_yml_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver
     */
    protected static function getDoctrine_Orm_DefaultYmlMetadataDriverService($container)
    {
        $container->privates['doctrine.orm.default_yml_metadata_driver'] = $instance = new \Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver([(\dirname(__DIR__, 4).'/config/doctrine') => 'App\\Entity']);

        $instance->setGlobalBasename('mapping');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.naming_strategy.underscore_number_aware' shared service.
     *
     * @return \Doctrine\ORM\Mapping\UnderscoreNamingStrategy
     */
    protected static function getDoctrine_Orm_NamingStrategy_UnderscoreNumberAwareService($container)
    {
        return $container->privates['doctrine.orm.naming_strategy.underscore_number_aware'] = new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true);
    }

    /**
     * Gets the private 'doctrine.orm.quote_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultQuoteStrategy
     */
    protected static function getDoctrine_Orm_QuoteStrategy_DefaultService($container)
    {
        return $container->privates['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy();
    }

    /**
     * Gets the private 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected static function getDoctrine_Orm_ValidatorInitializerService($container)
    {
        return $container->privates['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /**
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()), true, []);
    }

    /**
     * Gets the private 'fos_rest.body_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener
     */
    protected static function getFosRest_BodyListenerService($container)
    {
        $container->privates['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener(($container->privates['fos_rest.decoder_provider'] ?? self::getFosRest_DecoderProviderService($container)), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the private 'fos_rest.decoder_provider' shared service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider
     */
    protected static function getFosRest_DecoderProviderService($container)
    {
        return $container->privates['fos_rest.decoder_provider'] = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'fos_rest.decoder.json' => ['privates', 'fos_rest.decoder.json', 'getFosRest_Decoder_JsonService', true],
            'fos_rest.decoder.xml' => ['privates', 'fos_rest.decoder.xml', 'getFosRest_Decoder_XmlService', true],
        ], [
            'fos_rest.decoder.json' => '?',
            'fos_rest.decoder.xml' => '?',
        ]), ['json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml']);
    }

    /**
     * Gets the private 'fos_rest.format_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\FormatListener
     */
    protected static function getFosRest_FormatListenerService($container)
    {
        return $container->privates['fos_rest.format_listener'] = new \FOS\RestBundle\EventListener\FormatListener(($container->privates['fos_rest.format_negotiator'] ?? self::getFosRest_FormatNegotiatorService($container)));
    }

    /**
     * Gets the private 'fos_rest.format_negotiator' shared service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator
     */
    protected static function getFosRest_FormatNegotiatorService($container)
    {
        $container->privates['fos_rest.format_negotiator'] = $instance = new \FOS\RestBundle\Negotiation\FormatNegotiator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->add(($container->privates['fos_rest.request_matcher.7e437a1bd0410de47b53737cedd3a1da2e51036b14ed3da048d3b9639aa83b903d1e4c5e'] ?? self::getFosRest_RequestMatcher_7e437a1bd0410de47b53737cedd3a1da2e51036b14ed3da048d3b9639aa83b903d1e4c5eService($container)), ['priorities' => ['html'], 'fallback_format' => 'html', 'methods' => NULL, 'attributes' => [], 'stop' => false, 'prefer_extension' => '2.0']);
        $instance->add(($container->privates['fos_rest.request_matcher.35012096133f739bdc6bcc2346b6a5e2436616e6ba71f4b09b9fe43dc74bab79257b9bf8'] ?? self::getFosRest_RequestMatcher_35012096133f739bdc6bcc2346b6a5e2436616e6ba71f4b09b9fe43dc74bab79257b9bf8Service($container)), ['priorities' => ['html'], 'fallback_format' => 'html', 'methods' => NULL, 'attributes' => [], 'stop' => false, 'prefer_extension' => '2.0']);
        $instance->add(($container->privates['fos_rest.request_matcher.69e9d3fd562e0ecffc5bce0c68d3b7a673d187934b742bc76452558275bbd7611198d478'] ?? self::getFosRest_RequestMatcher_69e9d3fd562e0ecffc5bce0c68d3b7a673d187934b742bc76452558275bbd7611198d478Service($container)), ['priorities' => ['json'], 'fallback_format' => 'json', 'prefer_extension' => '2.0', 'methods' => NULL, 'attributes' => [], 'stop' => false]);

        return $instance;
    }

    /**
     * Gets the private 'fos_rest.request_matcher.35012096133f739bdc6bcc2346b6a5e2436616e6ba71f4b09b9fe43dc74bab79257b9bf8' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\ChainRequestMatcher
     */
    protected static function getFosRest_RequestMatcher_35012096133f739bdc6bcc2346b6a5e2436616e6ba71f4b09b9fe43dc74bab79257b9bf8Service($container)
    {
        return $container->privates['fos_rest.request_matcher.35012096133f739bdc6bcc2346b6a5e2436616e6ba71f4b09b9fe43dc74bab79257b9bf8'] = new \Symfony\Component\HttpFoundation\ChainRequestMatcher([new \Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher('^/science-books/*')]);
    }

    /**
     * Gets the private 'fos_rest.request_matcher.69e9d3fd562e0ecffc5bce0c68d3b7a673d187934b742bc76452558275bbd7611198d478' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\ChainRequestMatcher
     */
    protected static function getFosRest_RequestMatcher_69e9d3fd562e0ecffc5bce0c68d3b7a673d187934b742bc76452558275bbd7611198d478Service($container)
    {
        return $container->privates['fos_rest.request_matcher.69e9d3fd562e0ecffc5bce0c68d3b7a673d187934b742bc76452558275bbd7611198d478'] = new \Symfony\Component\HttpFoundation\ChainRequestMatcher([new \Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher('^/')]);
    }

    /**
     * Gets the private 'fos_rest.request_matcher.7e437a1bd0410de47b53737cedd3a1da2e51036b14ed3da048d3b9639aa83b903d1e4c5e' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\ChainRequestMatcher
     */
    protected static function getFosRest_RequestMatcher_7e437a1bd0410de47b53737cedd3a1da2e51036b14ed3da048d3b9639aa83b903d1e4c5eService($container)
    {
        return $container->privates['fos_rest.request_matcher.7e437a1bd0410de47b53737cedd3a1da2e51036b14ed3da048d3b9639aa83b903d1e4c5e'] = new \Symfony\Component\HttpFoundation\ChainRequestMatcher([new \Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher('^/admin/*')]);
    }

    /**
     * Gets the private 'fos_rest.serializer.form_error_normalizer' shared service.
     *
     * @return \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getFosRest_Serializer_FormErrorNormalizerService($container)
    {
        return $container->privates['fos_rest.serializer.form_error_normalizer'] = new \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer();
    }

    /**
     * Gets the private 'identity_translator' shared service.
     *
     * @return \Symfony\Component\Translation\IdentityTranslator
     */
    protected static function getIdentityTranslatorService($container)
    {
        return $container->privates['identity_translator'] = new \Symfony\Component\Translation\IdentityTranslator();
    }

    /**
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en_US'));
            yield 1 => ($container->services['translator'] ?? self::getTranslatorService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? $container->load('getTranslation_LocaleSwitcherService'));
        }, 3), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en_US', ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /**
     * Gets the private 'pagerfanta.serializer.normalizer' shared service.
     *
     * @return \BabDev\PagerfantaBundle\Serializer\Normalizer\PagerfantaNormalizer
     */
    protected static function getPagerfanta_Serializer_NormalizerService($container)
    {
        return $container->privates['pagerfanta.serializer.normalizer'] = new \BabDev\PagerfantaBundle\Serializer\Normalizer\PagerfantaNormalizer();
    }

    /**
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /**
     * Gets the private 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected static function getPropertyAccessorService($container)
    {
        $a = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        return $container->privates['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($container->privates['cache.property_access'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false)), $a, $a);
    }

    /**
     * Gets the private 'property_info' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected static function getPropertyInfoService($container)
    {
        return $container->privates['property_info'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? $container->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
            yield 2 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(fn () => new \EmptyIterator(), 0), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /**
     * Gets the private 'property_info.reflection_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor
     */
    protected static function getPropertyInfo_ReflectionExtractorService($container)
    {
        return $container->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor();
    }

    /**
     * Gets the private 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected static function getResponseListenerService($container)
    {
        return $container->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false);
    }

    /**
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()), \dirname(__DIR__, 4), true);
    }

    /**
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected static function getSecurity_Authentication_TrustResolverService($container)
    {
        return $container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver();
    }

    /**
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_0Service($container)
    {
        return $container->privates['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user.provider.concrete.users_in_memory'] ??= new \Symfony\Component\Security\Core\User\InMemoryUserProvider([]));
        }, 1), 'main', ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()), ($container->privates['security.event_dispatcher.main'] ?? self::getSecurity_EventDispatcher_MainService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), [($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /**
     * Gets the private 'security.event_dispatcher.main' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_MainService($container)
    {
        $container->privates['security.event_dispatcher.main'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.main.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.main.user_provider'] ?? $container->load('getSecurity_Listener_Main_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.main'] ?? $container->load('getSecurity_Listener_Session_MainService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.main'] ?? $container->load('getSecurity_Listener_UserChecker_MainService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.main'] ?? $container->load('getSecurity_Listener_UserChecker_MainService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected static function getSecurity_Firewall_MapService($container)
    {
        $a = ($container->privates['.service_locator.zJyh7qS'] ?? self::get_ServiceLocator_ZJyh7qSService($container));

        if (isset($container->privates['security.firewall.map'])) {
            return $container->privates['security.firewall.map'];
        }

        return $container->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () use ($container) {
            yield 'security.firewall.map.context.dev' => ($container->privates['.security.request_matcher.kLbKLHa'] ?? $container->load('get_Security_RequestMatcher_KLbKLHaService'));
            yield 'security.firewall.map.context.main' => NULL;
        }, 2));
    }

    /**
     * Gets the private 'security.is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSecurity_IsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->privates['security.is_granted_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_granted_attribute_expression_language'] ?? self::getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected static function getSecurity_LogoutUrlGeneratorService($container)
    {
        return $container->privates['security.logout_url_generator'] = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /**
     * Gets the private 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected static function getSecurity_TokenStorageService($container)
    {
        return $container->privates['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /**
     * Gets the private 'security.untracked_token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected static function getSecurity_UntrackedTokenStorageService($container)
    {
        return $container->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        $a = ($container->privates['serializer.normalizer.object'] ?? self::getSerializer_Normalizer_ObjectService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }

        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([($container->privates['serializer.denormalizer.unwrapping'] ?? self::getSerializer_Denormalizer_UnwrappingService($container)), ($container->privates['pagerfanta.serializer.normalizer'] ??= new \BabDev\PagerfantaBundle\Serializer\Normalizer\PagerfantaNormalizer()), ($container->privates['fos_rest.serializer.form_error_normalizer'] ??= new \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['serializer.normalizer.flatten_exception'] ??= new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer()), ($container->privates['serializer.normalizer.problem'] ?? self::getSerializer_Normalizer_ProblemService($container)), ($container->privates['serializer.normalizer.uid'] ??= new \Symfony\Component\Serializer\Normalizer\UidNormalizer()), ($container->privates['serializer.normalizer.datetime'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer()), ($container->privates['serializer.normalizer.constraint_violation_list'] ?? self::getSerializer_Normalizer_ConstraintViolationListService($container)), ($container->privates['serializer.normalizer.datetimezone'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer()), ($container->privates['serializer.normalizer.dateinterval'] ??= new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer()), ($container->privates['serializer.normalizer.form_error'] ??= new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['serializer.normalizer.backed_enum'] ??= new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer()), ($container->privates['serializer.normalizer.data_uri'] ??= new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(NULL)), ($container->privates['serializer.normalizer.json_serializable'] ??= new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL)), ($container->privates['serializer.denormalizer.array'] ??= new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer()), $a], [($container->privates['serializer.encoder.xml'] ??= new \Symfony\Component\Serializer\Encoder\XmlEncoder()), ($container->privates['serializer.encoder.json'] ??= new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL)), ($container->privates['serializer.encoder.yaml'] ??= new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL)), ($container->privates['serializer.encoder.csv'] ??= new \Symfony\Component\Serializer\Encoder\CsvEncoder())]);
    }

    /**
     * Gets the private 'serializer.denormalizer.array' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
     */
    protected static function getSerializer_Denormalizer_ArrayService($container)
    {
        return $container->privates['serializer.denormalizer.array'] = new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer();
    }

    /**
     * Gets the private 'serializer.denormalizer.unwrapping' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer
     */
    protected static function getSerializer_Denormalizer_UnwrappingService($container)
    {
        return $container->privates['serializer.denormalizer.unwrapping'] = new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer(($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
    }

    /**
     * Gets the private 'serializer.encoder.csv' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\CsvEncoder
     */
    protected static function getSerializer_Encoder_CsvService($container)
    {
        return $container->privates['serializer.encoder.csv'] = new \Symfony\Component\Serializer\Encoder\CsvEncoder();
    }

    /**
     * Gets the private 'serializer.encoder.json' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\JsonEncoder
     */
    protected static function getSerializer_Encoder_JsonService($container)
    {
        return $container->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.encoder.xml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\XmlEncoder
     */
    protected static function getSerializer_Encoder_XmlService($container)
    {
        return $container->privates['serializer.encoder.xml'] = new \Symfony\Component\Serializer\Encoder\XmlEncoder();
    }

    /**
     * Gets the private 'serializer.encoder.yaml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\YamlEncoder
     */
    protected static function getSerializer_Encoder_YamlService($container)
    {
        return $container->privates['serializer.encoder.yaml'] = new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.mapping.chain_loader' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Loader\LoaderChain
     */
    protected static function getSerializer_Mapping_ChainLoaderService($container)
    {
        return $container->privates['serializer.mapping.chain_loader'] = new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)))]);
    }

    /**
     * Gets the private 'serializer.mapping.class_discriminator_resolver' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata
     */
    protected static function getSerializer_Mapping_ClassDiscriminatorResolverService($container)
    {
        return $container->privates['serializer.mapping.class_discriminator_resolver'] = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.mapping.class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getSerializer_Mapping_ClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(($container->privates['serializer.mapping.chain_loader'] ?? self::getSerializer_Mapping_ChainLoaderService($container)));
    }

    /**
     * Gets the private 'serializer.name_converter.metadata_aware' shared service.
     *
     * @return \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter
     */
    protected static function getSerializer_NameConverter_MetadataAwareService($container)
    {
        return $container->privates['serializer.name_converter.metadata_aware'] = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.backed_enum' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
     */
    protected static function getSerializer_Normalizer_BackedEnumService($container)
    {
        return $container->privates['serializer.normalizer.backed_enum'] = new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.constraint_violation_list' shared autowired service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
     */
    protected static function getSerializer_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['serializer.normalizer.constraint_violation_list'] = new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.data_uri' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DataUriNormalizer
     */
    protected static function getSerializer_Normalizer_DataUriService($container)
    {
        return $container->privates['serializer.normalizer.data_uri'] = new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(NULL);
    }

    /**
     * Gets the private 'serializer.normalizer.dateinterval' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
     */
    protected static function getSerializer_Normalizer_DateintervalService($container)
    {
        return $container->privates['serializer.normalizer.dateinterval'] = new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.datetime' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimeService($container)
    {
        return $container->privates['serializer.normalizer.datetime'] = new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.datetimezone' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimezoneService($container)
    {
        return $container->privates['serializer.normalizer.datetimezone'] = new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.flatten_exception' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer
     */
    protected static function getSerializer_Normalizer_FlattenExceptionService($container)
    {
        return $container->privates['serializer.normalizer.flatten_exception'] = new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.form_error' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getSerializer_Normalizer_FormErrorService($container)
    {
        return $container->privates['serializer.normalizer.form_error'] = new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.json_serializable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
     */
    protected static function getSerializer_Normalizer_JsonSerializableService($container)
    {
        return $container->privates['serializer.normalizer.json_serializable'] = new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.normalizer.object' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ObjectNormalizer
     */
    protected static function getSerializer_Normalizer_ObjectService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        if (isset($container->privates['serializer.normalizer.object'])) {
            return $container->privates['serializer.normalizer.object'];
        }

        return $container->privates['serializer.normalizer.object'] = new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), $a, ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL);
    }

    /**
     * Gets the private 'serializer.normalizer.problem' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ProblemNormalizer
     */
    protected static function getSerializer_Normalizer_ProblemService($container)
    {
        return $container->privates['serializer.normalizer.problem'] = new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(true, translator: ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.uid' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UidNormalizer
     */
    protected static function getSerializer_Normalizer_UidService($container)
    {
        return $container->privates['serializer.normalizer.uid'] = new \Symfony\Component\Serializer\Normalizer\UidNormalizer();
    }

    /**
     * Gets the private 'sylius.cache.metadata.resource_collection' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getSylius_Cache_Metadata_ResourceCollectionService($container)
    {
        return $container->privates['sylius.cache.metadata.resource_collection'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('wo9F+HTS1L', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['Psr\\Log\\NullLogger'] ??= new \Psr\Log\NullLogger()));
    }

    /**
     * Gets the private 'sylius.context.initiator.legacy_request_context' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Context\Initiator\LegacyRequestContextInitiator
     */
    protected static function getSylius_Context_Initiator_LegacyRequestContextService($container)
    {
        return $container->privates['sylius.context.initiator.legacy_request_context'] = new \Sylius\Bundle\ResourceBundle\Context\Initiator\LegacyRequestContextInitiator(($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)), ($container->privates['sylius.resource_controller.request_configuration_factory'] ?? self::getSylius_ResourceController_RequestConfigurationFactoryService($container)), ($container->privates['sylius.context.initiator.legacy_request_context.inner'] ??= new \Sylius\Component\Resource\Context\Initiator\RequestContextInitiator()));
    }

    /**
     * Gets the private 'sylius.context.initiator.legacy_request_context.inner' shared service.
     *
     * @return \Sylius\Component\Resource\Context\Initiator\RequestContextInitiator
     */
    protected static function getSylius_Context_Initiator_LegacyRequestContext_InnerService($container)
    {
        return $container->privates['sylius.context.initiator.legacy_request_context.inner'] = new \Sylius\Component\Resource\Context\Initiator\RequestContextInitiator();
    }

    /**
     * Gets the private 'sylius.dispatcher.operation' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\EventDispatcher\OperationEventDispatcher
     */
    protected static function getSylius_Dispatcher_OperationService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['sylius.dispatcher.operation'])) {
            return $container->privates['sylius.dispatcher.operation'];
        }

        return $container->privates['sylius.dispatcher.operation'] = new \Sylius\Component\Resource\Symfony\EventDispatcher\OperationEventDispatcher($a);
    }

    /**
     * Gets the private 'sylius.doctrine.orm.container_repository_factory' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Doctrine\ORM\ContainerRepositoryFactory
     */
    protected static function getSylius_Doctrine_Orm_ContainerRepositoryFactoryService($container)
    {
        return $container->privates['sylius.doctrine.orm.container_repository_factory'] = new \Sylius\Bundle\ResourceBundle\Doctrine\ORM\ContainerRepositoryFactory(($container->privates['sylius.doctrine.orm.container_repository_factory.inner'] ?? self::getSylius_Doctrine_Orm_ContainerRepositoryFactory_InnerService($container)), $container->parameters['sylius.doctrine.orm.container_repository_factory.entities']);
    }

    /**
     * Gets the private 'sylius.doctrine.orm.container_repository_factory.inner' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory
     */
    protected static function getSylius_Doctrine_Orm_ContainerRepositoryFactory_InnerService($container)
    {
        return $container->privates['sylius.doctrine.orm.container_repository_factory.inner'] = new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'App\\BoardGameBlog\\Infrastructure\\Doctrine\\DoctrineBoardGameRepository' => ['privates', 'App\\BoardGameBlog\\Infrastructure\\Doctrine\\DoctrineBoardGameRepository', 'getDoctrineBoardGameRepositoryService', true],
            'App\\Repository\\BookRepository' => ['privates', 'App\\Repository\\BookRepository', 'getBookRepositoryService', true],
            'App\\Repository\\ComicBookRepository' => ['privates', 'App\\Repository\\ComicBookRepository', 'getComicBookRepositoryService', true],
        ], [
            'App\\BoardGameBlog\\Infrastructure\\Doctrine\\DoctrineBoardGameRepository' => '?',
            'App\\Repository\\BookRepository' => '?',
            'App\\Repository\\ComicBookRepository' => '?',
        ]));
    }

    /**
     * Gets the private 'sylius.expression_language' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSylius_ExpressionLanguageService($container)
    {
        return $container->privates['sylius.expression_language'] = new \Sylius\Bundle\ResourceBundle\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the private 'sylius.expression_language.argument_parser.factory' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\ExpressionLanguage\ArgumentParser
     */
    protected static function getSylius_ExpressionLanguage_ArgumentParser_FactoryService($container)
    {
        return $container->privates['sylius.expression_language.argument_parser.factory'] = new \Sylius\Component\Resource\Symfony\ExpressionLanguage\ArgumentParser(($container->privates['sylius.resource_factory.expression_language'] ??= new \Symfony\Component\ExpressionLanguage\ExpressionLanguage()), ($container->privates['sylius.expression_language.variables_collection.factory'] ?? self::getSylius_ExpressionLanguage_VariablesCollection_FactoryService($container)));
    }

    /**
     * Gets the private 'sylius.expression_language.variables_collection.factory' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\ExpressionLanguage\VariablesCollection
     */
    protected static function getSylius_ExpressionLanguage_VariablesCollection_FactoryService($container)
    {
        return $container->privates['sylius.expression_language.variables_collection.factory'] = new \Sylius\Component\Resource\Symfony\ExpressionLanguage\VariablesCollection(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['sylius.expression_language.variables.token'] ?? $container->load('getSylius_ExpressionLanguage_Variables_TokenService'));
            yield 1 => ($container->privates['sylius.expression_language.variables.request'] ?? $container->load('getSylius_ExpressionLanguage_Variables_RequestService'));
        }, 2));
    }

    /**
     * Gets the private 'sylius.listener.add_format' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\EventListener\AddFormatListener
     */
    protected static function getSylius_Listener_AddFormatService($container)
    {
        return $container->privates['sylius.listener.add_format'] = new \Sylius\Component\Resource\Symfony\EventListener\AddFormatListener(($container->privates['sylius.resource_metadata_operation.initiator.http_operation'] ?? self::getSylius_ResourceMetadataOperation_Initiator_HttpOperationService($container)), ($container->privates['sylius.negotiator'] ??= new \Negotiation\Negotiator()));
    }

    /**
     * Gets the private 'sylius.listener.deserialize' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\EventListener\DeserializeListener
     */
    protected static function getSylius_Listener_DeserializeService($container)
    {
        $a = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['sylius.listener.deserialize'])) {
            return $container->privates['sylius.listener.deserialize'];
        }

        return $container->privates['sylius.listener.deserialize'] = new \Sylius\Component\Resource\Symfony\EventListener\DeserializeListener(($container->privates['sylius.resource_metadata_operation.initiator.http_operation'] ?? self::getSylius_ResourceMetadataOperation_Initiator_HttpOperationService($container)), $a);
    }

    /**
     * Gets the private 'sylius.listener.factory' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\EventListener\FactoryListener
     */
    protected static function getSylius_Listener_FactoryService($container)
    {
        return $container->privates['sylius.listener.factory'] = new \Sylius\Component\Resource\Symfony\EventListener\FactoryListener(($container->privates['sylius.resource_metadata_operation.initiator.http_operation'] ?? self::getSylius_ResourceMetadataOperation_Initiator_HttpOperationService($container)), ($container->privates['sylius.context.initiator.legacy_request_context'] ?? self::getSylius_Context_Initiator_LegacyRequestContextService($container)), ($container->privates['sylius.state.factory'] ?? self::getSylius_State_FactoryService($container)));
    }

    /**
     * Gets the private 'sylius.listener.read' shared service.
     *
     * @return \Sylius\Component\Resource\Symfony\EventListener\ReadListener
     */
    protected static function getSylius_Listener_ReadService($container)
    {
        $a = ($container->privates['sylius.state.provider.event_dispatcher'] ?? self::getSylius_State_Provider_EventDispatcherService($container));

        if (isset($container->privates['sylius.listener.read'])) {
            return $container->privates['sylius.listener.read'];
        }

        return $container->privates['sylius.listener.read'] = new \Sylius\Component\Resource\Symfony\EventListener\ReadListener(($container->privates['sylius.resource_metadata_operation.initiator.http_operation'] ?? self::getSylius_ResourceMetadataOperation_Initiator_HttpOperationService($container)), ($container->privates['sylius.context.initiator.legacy_request_context'] ?? self::getSylius_Context_Initiator_LegacyRequestContextService($container)), $a);
    }

    /**
     * Gets the private 'sylius.negotiator' shared service.
     *
     * @return \Negotiation\Negotiator
     */
    protected static function getSylius_NegotiatorService($container)
    {
        return $container->privates['sylius.negotiator'] = new \Negotiation\Negotiator();
    }

    /**
     * Gets the private 'sylius.resource_controller.parameters_parser' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\ParametersParser
     */
    protected static function getSylius_ResourceController_ParametersParserService($container)
    {
        return $container->privates['sylius.resource_controller.parameters_parser'] = new \Sylius\Bundle\ResourceBundle\Controller\ParametersParser($container, ($container->privates['sylius.expression_language'] ??= new \Sylius\Bundle\ResourceBundle\ExpressionLanguage\ExpressionLanguage()));
    }

    /**
     * Gets the private 'sylius.resource_controller.request_configuration_factory' shared service.
     *
     * @return \Sylius\Bundle\ResourceBundle\Controller\RequestConfigurationFactory
     */
    protected static function getSylius_ResourceController_RequestConfigurationFactoryService($container)
    {
        return $container->privates['sylius.resource_controller.request_configuration_factory'] = new \Sylius\Bundle\ResourceBundle\Controller\RequestConfigurationFactory(($container->privates['sylius.resource_controller.parameters_parser'] ?? self::getSylius_ResourceController_ParametersParserService($container)), 'Sylius\\Bundle\\ResourceBundle\\Controller\\RequestConfiguration', $container->parameters['sylius.resource.settings']);
    }

    /**
     * Gets the private 'sylius.resource_factory.expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSylius_ResourceFactory_ExpressionLanguageService($container)
    {
        return $container->privates['sylius.resource_factory.expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.cached' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\CachedResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_CachedService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.cached'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\CachedResourceMetadataCollectionFactory(($container->privates['sylius.cache.metadata.resource_collection'] ?? self::getSylius_Cache_Metadata_ResourceCollectionService($container)), ($container->privates['sylius.resource_metadata_collection.factory.event_short_name'] ?? self::getSylius_ResourceMetadataCollection_Factory_EventShortNameService($container)));
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.doctrine' shared service.
     *
     * @return \Sylius\Component\Resource\Doctrine\Common\Metadata\Resource\Factory\DoctrineResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_DoctrineService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.doctrine'] = new \Sylius\Component\Resource\Doctrine\Common\Metadata\Resource\Factory\DoctrineResourceMetadataCollectionFactory(($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)), ($container->privates['sylius.resource_metadata_collection.factory.templates_dir'] ?? self::getSylius_ResourceMetadataCollection_Factory_TemplatesDirService($container)));
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.event_short_name' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\EventShortNameResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_EventShortNameService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.event_short_name'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\EventShortNameResourceMetadataCollectionFactory(($container->privates['sylius.resource_metadata_collection.factory.resource_factory'] ?? self::getSylius_ResourceMetadataCollection_Factory_ResourceFactoryService($container)));
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.redirect' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\RedirectResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_RedirectService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.redirect'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\RedirectResourceMetadataCollectionFactory(($container->services['Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRouteNameFactoryInterface'] ??= new \Sylius\Component\Resource\Symfony\Routing\Factory\OperationRouteNameFactory()), ($container->privates['sylius.resource_metadata_collection.factory.doctrine'] ?? self::getSylius_ResourceMetadataCollection_Factory_DoctrineService($container)));
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.resource_factory' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\FactoryResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_ResourceFactoryService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.resource_factory'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\FactoryResourceMetadataCollectionFactory(($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)), ($container->privates['sylius.resource_metadata_collection.factory.redirect'] ?? self::getSylius_ResourceMetadataCollection_Factory_RedirectService($container)));
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.templates_dir' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\TemplatesDirResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_TemplatesDirService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.templates_dir'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\TemplatesDirResourceMetadataCollectionFactory(($container->privates['sylius.resource_metadata_collection.factory.templates_dir.inner'] ?? self::getSylius_ResourceMetadataCollection_Factory_TemplatesDir_InnerService($container)), $container->parameters['sylius.resource.settings']);
    }

    /**
     * Gets the private 'sylius.resource_metadata_collection.factory.templates_dir.inner' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Resource\Factory\AttributesResourceMetadataCollectionFactory
     */
    protected static function getSylius_ResourceMetadataCollection_Factory_TemplatesDir_InnerService($container)
    {
        return $container->privates['sylius.resource_metadata_collection.factory.templates_dir.inner'] = new \Sylius\Component\Resource\Metadata\Resource\Factory\AttributesResourceMetadataCollectionFactory(($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)), ($container->services['Sylius\\Component\\Resource\\Symfony\\Routing\\Factory\\OperationRouteNameFactoryInterface'] ??= new \Sylius\Component\Resource\Symfony\Routing\Factory\OperationRouteNameFactory()), NULL);
    }

    /**
     * Gets the private 'sylius.resource_metadata_operation.initiator.http_operation' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Operation\HttpOperationInitiator
     */
    protected static function getSylius_ResourceMetadataOperation_Initiator_HttpOperationService($container)
    {
        return $container->privates['sylius.resource_metadata_operation.initiator.http_operation'] = new \Sylius\Component\Resource\Metadata\Operation\HttpOperationInitiator(($container->privates['sylius.resource_registry'] ?? self::getSylius_ResourceRegistryService($container)), ($container->privates['sylius.resource_metadata_collection.factory.cached'] ?? self::getSylius_ResourceMetadataCollection_Factory_CachedService($container)));
    }

    /**
     * Gets the private 'sylius.resource_registry' shared service.
     *
     * @return \Sylius\Component\Resource\Metadata\Registry
     */
    protected static function getSylius_ResourceRegistryService($container)
    {
        $container->privates['sylius.resource_registry'] = $instance = new \Sylius\Component\Resource\Metadata\Registry();

        $instance->addFromAliasAndConfiguration('app.board_game', ['driver' => false, 'classes' => ['model' => 'App\\BoardGameBlog\\Infrastructure\\Sylius\\Resource\\BoardGameResource', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType'], 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.blog_post', ['classes' => ['model' => 'App\\Entity\\BlogPost', 'form' => 'App\\Form\\Type\\BlogPostType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.book', ['classes' => ['model' => 'App\\Entity\\Book', 'factory' => 'App\\Factory\\BookFactory', 'controller' => 'App\\Controller\\BookController', 'repository' => 'App\\Repository\\BookRepository', 'form' => 'App\\Form\\Type\\BookType'], 'translation' => ['classes' => ['model' => 'App\\Entity\\BookTranslation', 'form' => 'App\\Form\\Type\\BookTranslationType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory']], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.book_translation', ['driver' => 'doctrine/orm', 'classes' => ['model' => 'App\\Entity\\BookTranslation', 'form' => 'App\\Form\\Type\\BookTranslationType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory']]);
        $instance->addFromAliasAndConfiguration('app.comic_book', ['classes' => ['model' => 'App\\Entity\\ComicBook', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType'], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.science_book', ['classes' => ['model' => 'App\\Entity\\ScienceBook', 'form' => 'App\\Form\\Type\\ScienceBookType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.gedmo', ['classes' => ['model' => 'App\\Entity\\GedmoExtendedExample', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType'], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.pull_request', ['classes' => ['model' => 'App\\Entity\\PullRequest', 'form' => 'App\\Form\\Type\\PullRequestType', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory'], 'driver' => 'doctrine/orm', 'state_machine_component' => NULL]);
        $instance->addFromAliasAndConfiguration('app.subscription', ['classes' => ['model' => 'App\\Subscription\\Entity\\Subscription', 'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController', 'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory', 'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType'], 'driver' => 'doctrine/orm']);

        return $instance;
    }

    /**
     * Gets the private 'sylius.state.factory' shared service.
     *
     * @return \Sylius\Component\Resource\State\Factory
     */
    protected static function getSylius_State_FactoryService($container)
    {
        return $container->privates['sylius.state.factory'] = new \Sylius\Component\Resource\State\Factory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'app.factory.blog_post' => ['services', 'app.factory.blog_post', 'getApp_Factory_BlogPostService', true],
            'app.factory.book' => ['services', 'app.factory.book', 'getApp_Factory_BookService', true],
            'app.factory.book_translation' => ['services', 'app.factory.book_translation', 'getApp_Factory_BookTranslationService', true],
            'app.factory.comic_book' => ['services', 'app.factory.comic_book', 'getApp_Factory_ComicBookService', true],
            'app.factory.gedmo' => ['services', 'app.factory.gedmo', 'getApp_Factory_GedmoService', true],
            'app.factory.pull_request' => ['services', 'app.factory.pull_request', 'getApp_Factory_PullRequestService', true],
            'app.factory.science_book' => ['services', 'app.factory.science_book', 'getApp_Factory_ScienceBookService', true],
            'app.factory.subscription' => ['services', 'app.factory.subscription', 'getApp_Factory_SubscriptionService', true],
        ], [
            'app.factory.blog_post' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.book' => 'App\\Factory\\BookFactory',
            'app.factory.book_translation' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.comic_book' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.gedmo' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.pull_request' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.science_book' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.factory.subscription' => '?',
        ]), ($container->privates['sylius.expression_language.argument_parser.factory'] ?? self::getSylius_ExpressionLanguage_ArgumentParser_FactoryService($container)));
    }

    /**
     * Gets the private 'sylius.state.provider.event_dispatcher' shared service.
     *
     * @return \Sylius\Component\Resource\State\EventDispatcherProvider
     */
    protected static function getSylius_State_Provider_EventDispatcherService($container)
    {
        $a = ($container->privates['sylius.state.provider.event_dispatcher.inner'] ?? self::getSylius_State_Provider_EventDispatcher_InnerService($container));

        if (isset($container->privates['sylius.state.provider.event_dispatcher'])) {
            return $container->privates['sylius.state.provider.event_dispatcher'];
        }
        $b = ($container->privates['sylius.dispatcher.operation'] ?? self::getSylius_Dispatcher_OperationService($container));

        if (isset($container->privates['sylius.state.provider.event_dispatcher'])) {
            return $container->privates['sylius.state.provider.event_dispatcher'];
        }

        return $container->privates['sylius.state.provider.event_dispatcher'] = new \Sylius\Component\Resource\State\EventDispatcherProvider($a, $b);
    }

    /**
     * Gets the private 'sylius.state.provider.event_dispatcher.inner' shared service.
     *
     * @return \Sylius\Component\Resource\State\Provider
     */
    protected static function getSylius_State_Provider_EventDispatcher_InnerService($container)
    {
        return $container->privates['sylius.state.provider.event_dispatcher.inner'] = new \Sylius\Component\Resource\State\Provider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameCollectionProvider' => ['privates', 'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameCollectionProvider', 'getBoardGameCollectionProviderService', true],
            'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameItemProvider' => ['privates', 'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameItemProvider', 'getBoardGameItemProviderService', true],
            'Sylius\\Component\\Resource\\Grid\\State\\RequestGridProvider' => ['privates', 'Sylius\\Component\\Resource\\Grid\\State\\RequestGridProvider', 'getRequestGridProviderService', true],
            'Sylius\\Component\\Resource\\Symfony\\Request\\State\\Provider' => ['privates', 'Sylius\\Component\\Resource\\Symfony\\Request\\State\\Provider', 'getProviderService', true],
        ], [
            'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameCollectionProvider' => 'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameCollectionProvider',
            'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameItemProvider' => 'App\\BoardGameBlog\\Infrastructure\\Sylius\\State\\Http\\Provider\\BoardGameItemProvider',
            'Sylius\\Component\\Resource\\Grid\\State\\RequestGridProvider' => 'Sylius\\Component\\Resource\\Grid\\State\\RequestGridProvider',
            'Sylius\\Component\\Resource\\Symfony\\Request\\State\\Provider' => 'Sylius\\Component\\Resource\\Symfony\\Request\\State\\Provider',
        ]));
    }

    /**
     * Gets the private 'test.session.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getTest_Session_ListenerService($container)
    {
        return $container->privates['test.session.listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', true],
        ], [
            'session_factory' => '?',
        ]), true, $container->parameters['session.storage.options']);
    }

    /**
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected static function getTranslator_Formatter_DefaultService($container)
    {
        return $container->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(($container->privates['identity_translator'] ??= new \Symfony\Component\Translation\IdentityTranslator()));
    }

    /**
     * Gets the private 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected static function getValidateRequestListenerService($container)
    {
        return $container->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the private 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected static function getValidatorService($container)
    {
        $a = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container));

        if (isset($container->privates['validator'])) {
            return $container->privates['validator'];
        }

        return $container->privates['validator'] = $a->getValidator();
    }

    /**
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(($container->privates['validator.validator_factory'] ?? self::getValidator_ValidatorFactoryService($container)));
        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings([(\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/config/validation.xml')]);
        $instance->addYamlMappings([(\dirname(__DIR__, 4).'/config/validator/validation.yaml')]);
        $instance->enableAnnotationMapping(true);
        $instance->setDoctrineAnnotationReader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers([($container->privates['doctrine.orm.validator_initializer'] ?? self::getDoctrine_Orm_ValidatorInitializerService($container))]);
        $instance->addLoader(($container->privates['validator.property_info_loader'] ?? self::getValidator_PropertyInfoLoaderService($container)));
        $instance->addLoader(($container->privates['doctrine.orm.default_entity_manager.validator_loader'] ?? self::getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'validator.property_info_loader' shared service.
     *
     * @return \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader
     */
    protected static function getValidator_PropertyInfoLoaderService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        return $container->privates['validator.property_info_loader'] = new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected static function getValidator_ValidatorFactoryService($container)
    {
        return $container->privates['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
        ], [
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'security.validator.user_password' => '?',
            'validator.expression' => '?',
        ]));
    }

    /**
     * Gets the public 'pagerfanta.route_generator_factory' alias.
     *
     * @return object The ".container.private.pagerfanta.route_generator_factory" service.
     */
    protected static function getPagerfanta_RouteGeneratorFactoryService($container)
    {
        trigger_deprecation('babdev/pagerfanta-bundle', '3.5', 'Accessing the "pagerfanta.route_generator_factory" service directly from the container is deprecated, use dependency injection instead.');

        return $container->get('.container.private.pagerfanta.route_generator_factory');
    }

    /**
     * Gets the public 'pagerfanta.view_factory' alias.
     *
     * @return object The ".container.private.pagerfanta.view_factory" service.
     */
    protected static function getPagerfanta_ViewFactoryService($container)
    {
        trigger_deprecation('babdev/pagerfanta-bundle', '3.5', 'Accessing the "pagerfanta.view_factory" service directly from the container is deprecated, use dependency injection instead.');

        return $container->get('.container.private.pagerfanta.view_factory');
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'debug.file_link_format' => false,
        'debug.container.dump' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
        'doctrine.orm.proxy_dir' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'debug.file_link_format' => $container->getEnv('default::SYMFONY_IDE'),
            'debug.container.dump' => ($container->targetDir.''.'/App_KernelTestDebugContainer.xml'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            'doctrine.orm.proxy_dir' => ($container->targetDir.''.'/doctrine/orm/Proxies'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'test',
            'kernel.debug' => true,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'SyliusResourceBundle' => 'Sylius\\Bundle\\ResourceBundle\\SyliusResourceBundle',
                'BabDevPagerfantaBundle' => 'BabDev\\PagerfantaBundle\\BabDevPagerfantaBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle',
                'FidryAliceDataFixturesBundle' => 'Fidry\\AliceDataFixtures\\Bridge\\Symfony\\FidryAliceDataFixturesBundle',
                'NelmioAliceBundle' => 'Nelmio\\Alice\\Bridge\\Symfony\\NelmioAliceBundle',
                'winzouStateMachineBundle' => 'winzou\\Bundle\\StateMachineBundle\\winzouStateMachineBundle',
                'SyliusGridBundle' => 'Sylius\\Bundle\\GridBundle\\SyliusGridBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'SyliusResourceBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/src/Bundle'),
                    'namespace' => 'Sylius\\Bundle\\ResourceBundle',
                ],
                'BabDevPagerfantaBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/babdev/pagerfanta-bundle'),
                    'namespace' => 'BabDev\\PagerfantaBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'FOSRestBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/friendsofsymfony/rest-bundle'),
                    'namespace' => 'FOS\\RestBundle',
                ],
                'JMSSerializerBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ],
                'BazingaHateoasBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/willdurand/hateoas-bundle'),
                    'namespace' => 'Bazinga\\Bundle\\HateoasBundle',
                ],
                'FidryAliceDataFixturesBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/theofidry/alice-data-fixtures/src/Bridge/Symfony'),
                    'namespace' => 'Fidry\\AliceDataFixtures\\Bridge\\Symfony',
                ],
                'NelmioAliceBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/nelmio/alice/src/Bridge/Symfony'),
                    'namespace' => 'Nelmio\\Alice\\Bridge\\Symfony',
                ],
                'winzouStateMachineBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/winzou/state-machine-bundle'),
                    'namespace' => 'winzou\\Bundle\\StateMachineBundle',
                ],
                'SyliusGridBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/sylius/grid-bundle/src/Bundle'),
                    'namespace' => 'Sylius\\Bundle\\GridBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'App_KernelTestDebugContainer',
            'database_driver' => 'pdo_sqlite',
            'database_path' => (\dirname(__DIR__, 4).'/config/db.sql'),
            'locale' => 'en_US',
            'secret' => 'Three can keep a secret, if two of them are dead.',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Workflow\\Event\\GuardEvent' => 'workflow.guard',
                'Symfony\\Component\\Workflow\\Event\\LeaveEvent' => 'workflow.leave',
                'Symfony\\Component\\Workflow\\Event\\TransitionEvent' => 'workflow.transition',
                'Symfony\\Component\\Workflow\\Event\\EnterEvent' => 'workflow.enter',
                'Symfony\\Component\\Workflow\\Event\\EnteredEvent' => 'workflow.entered',
                'Symfony\\Component\\Workflow\\Event\\CompletedEvent' => 'workflow.completed',
                'Symfony\\Component\\Workflow\\Event\\AnnounceEvent' => 'workflow.announce',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.secret' => 'Three can keep a secret, if two of them are dead.',
            'kernel.http_method_override' => true,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en_US',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'test.client.parameters' => [

            ],
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'debug.error_handler.throw_at' => -1,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'cookie_httponly' => true,
                'gc_probability' => 1,
            ],
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'security.role_hierarchy.roles' => [

            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'dev',
                1 => 'main',
            ],
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'uuid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UuidType',
                ],
                'ulid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UlidType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.enable_lazy_ghost_objects' => false,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'sylius.state_machine.class' => 'Sylius\\Component\\Resource\\StateMachine\\StateMachine',
            'sylius.resource.mapping' => [
                'paths' => [
                    0 => (\dirname(__DIR__, 4).'/src/BoardGameBlog/Infrastructure/Sylius/Resource'),
                    1 => (\dirname(__DIR__, 4).'/src/Subscription/Entity'),
                ],
            ],
            'sylius.resource.settings' => [
                'state_machine_component' => 'symfony',
                'paginate' => NULL,
                'limit' => NULL,
                'allowed_paginate' => [
                    0 => 10,
                    1 => 20,
                    2 => 30,
                ],
                'default_page_size' => 10,
                'default_templates_dir' => NULL,
                'sortable' => false,
                'sorting' => NULL,
                'filterable' => false,
                'criteria' => NULL,
            ],
            'sylius.orm.repository.class' => 'Sylius\\Bundle\\ResourceBundle\\Doctrine\\ORM\\EntityRepository',
            'sylius.translation.translatable_listener.doctrine.orm.class' => 'Sylius\\Bundle\\ResourceBundle\\EventListener\\ORMTranslatableListener',
            'sylius.resources' => [
                'app.board_game' => [
                    'driver' => false,
                    'classes' => [
                        'model' => 'App\\BoardGameBlog\\Infrastructure\\Sylius\\Resource\\BoardGameResource',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType',
                    ],
                    'state_machine_component' => NULL,
                ],
                'app.blog_post' => [
                    'classes' => [
                        'model' => 'App\\Entity\\BlogPost',
                        'form' => 'App\\Form\\Type\\BlogPostType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.book' => [
                    'classes' => [
                        'model' => 'App\\Entity\\Book',
                        'factory' => 'App\\Factory\\BookFactory',
                        'controller' => 'App\\Controller\\BookController',
                        'repository' => 'App\\Repository\\BookRepository',
                        'form' => 'App\\Form\\Type\\BookType',
                    ],
                    'translation' => [
                        'classes' => [
                            'model' => 'App\\Entity\\BookTranslation',
                            'form' => 'App\\Form\\Type\\BookTranslationType',
                            'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                            'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        ],
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.book_translation' => [
                    'driver' => 'doctrine/orm',
                    'classes' => [
                        'model' => 'App\\Entity\\BookTranslation',
                        'form' => 'App\\Form\\Type\\BookTranslationType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ],
                ],
                'app.comic_book' => [
                    'classes' => [
                        'model' => 'App\\Entity\\ComicBook',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType',
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.science_book' => [
                    'classes' => [
                        'model' => 'App\\Entity\\ScienceBook',
                        'form' => 'App\\Form\\Type\\ScienceBookType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.gedmo' => [
                    'classes' => [
                        'model' => 'App\\Entity\\GedmoExtendedExample',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType',
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.pull_request' => [
                    'classes' => [
                        'model' => 'App\\Entity\\PullRequest',
                        'form' => 'App\\Form\\Type\\PullRequestType',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                    ],
                    'driver' => 'doctrine/orm',
                    'state_machine_component' => NULL,
                ],
                'app.subscription' => [
                    'classes' => [
                        'model' => 'App\\Subscription\\Entity\\Subscription',
                        'controller' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
                        'factory' => 'Sylius\\Component\\Resource\\Factory\\Factory',
                        'form' => 'Sylius\\Bundle\\ResourceBundle\\Form\\Type\\DefaultResourceType',
                    ],
                    'driver' => 'doctrine/orm',
                ],
            ],
            'app.model.blog_post.class' => 'App\\Entity\\BlogPost',
            'app.controller.blog_post.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.blog_post.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'sylius.doctrine.orm.container_repository_factory.entities' => [
                0 => 'App\\Entity\\BlogPost',
                1 => 'App\\Entity\\BookTranslation',
                2 => 'App\\Entity\\ComicBook',
                3 => 'App\\Entity\\ScienceBook',
                4 => 'App\\Entity\\GedmoExtendedExample',
                5 => 'App\\Entity\\PullRequest',
                6 => 'App\\Subscription\\Entity\\Subscription',
            ],
            'app.model.book.class' => 'App\\Entity\\Book',
            'app.controller.book.class' => 'App\\Controller\\BookController',
            'app.factory.book.class' => 'App\\Factory\\BookFactory',
            'app.repository.book.class' => 'App\\Repository\\BookRepository',
            'app.model.book_translation.class' => 'App\\Entity\\BookTranslation',
            'app.controller.book_translation.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.book_translation.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.comic_book.class' => 'App\\Entity\\ComicBook',
            'app.controller.comic_book.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.comic_book.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.science_book.class' => 'App\\Entity\\ScienceBook',
            'app.controller.science_book.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.science_book.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.gedmo.class' => 'App\\Entity\\GedmoExtendedExample',
            'app.controller.gedmo.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.gedmo.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.pull_request.class' => 'App\\Entity\\PullRequest',
            'app.controller.pull_request.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.pull_request.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'app.model.subscription.class' => 'App\\Subscription\\Entity\\Subscription',
            'app.controller.subscription.class' => 'Sylius\\Bundle\\ResourceBundle\\Controller\\ResourceController',
            'app.factory.subscription.class' => 'Sylius\\Component\\Resource\\Factory\\Factory',
            'babdev_pagerfanta.default_twig_template' => '@Pagerfanta/default.html.twig',
            'babdev_pagerfanta.default_view' => 'default',
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'fos_rest.format_listener.rules' => NULL,
            'fidry_alice_data_fixtures.default_purge_mode' => 'delete',
            'nelmio_alice.locale' => 'en_US',
            'nelmio_alice.seed' => 1,
            'nelmio_alice.functions_blacklist' => [
                0 => 'current',
            ],
            'nelmio_alice.loading_limit' => 5,
            'nelmio_alice.max_unique_values_retry' => 150,
            'sm.configs' => [
                'pull_request' => [
                    'class' => 'App\\Entity\\PullRequest',
                    'property_path' => 'currentPlace',
                    'graph' => 'pull_request',
                    'states' => [
                        0 => 'start',
                        1 => 'coding',
                        2 => 'test',
                        3 => 'review',
                        4 => 'merged',
                        5 => 'closed',
                    ],
                    'transitions' => [
                        'submit' => [
                            'from' => [
                                0 => 'start',
                            ],
                            'to' => 'test',
                        ],
                        'update' => [
                            'from' => [
                                0 => 'coding',
                                1 => 'test',
                                2 => 'review',
                            ],
                            'to' => 'test',
                        ],
                        'wait_for_review' => [
                            'from' => [
                                0 => 'test',
                            ],
                            'to' => 'review',
                        ],
                        'request_change' => [
                            'from' => [
                                0 => 'review',
                            ],
                            'to' => 'coding',
                        ],
                        'accept' => [
                            'from' => [
                                0 => 'review',
                            ],
                            'to' => 'merged',
                        ],
                        'reject' => [
                            'from' => [
                                0 => 'review',
                            ],
                            'to' => 'closed',
                        ],
                        'reopen' => [
                            'from' => [
                                0 => 'closed',
                            ],
                            'to' => 'review',
                        ],
                    ],
                    'state_machine_class' => 'SM\\StateMachine\\StateMachine',
                ],
                'subscription' => [
                    'class' => 'App\\Subscription\\Entity\\Subscription',
                    'property_path' => 'state',
                    'graph' => 'subscription',
                    'states' => [
                        0 => 'new',
                        1 => 'accepted',
                        2 => 'rejected',
                    ],
                    'transitions' => [
                        'accept' => [
                            'from' => [
                                0 => 'new',
                            ],
                            'to' => 'accepted',
                        ],
                        'reject' => [
                            'from' => [
                                0 => 'new',
                            ],
                            'to' => 'rejected',
                        ],
                    ],
                    'state_machine_class' => 'SM\\StateMachine\\StateMachine',
                ],
            ],
            'sm.callback.class' => 'winzou\\Bundle\\StateMachineBundle\\Callback\\ContainerAwareCallback',
            'sylius.grid.templates.action' => [
                'apply_transition' => 'grid/action/apply_transition.html.twig',
                'delete' => 'grid/action/delete.html.twig',
                'show' => 'grid/action/show.html.twig',
                'update' => 'grid/action/update.html.twig',
            ],
            'sylius.grid.templates.bulk_action' => [
                'delete' => 'grid/bulk_action/delete.html.twig',
            ],
            'sylius.grid.templates.filter' => [

            ],
            'sylius.grids_definitions' => [
                'science_book_grid' => [
                    'driver' => [
                        'options' => [
                            'class' => 'App\\Entity\\ScienceBook',
                        ],
                        'name' => 'doctrine/orm',
                    ],
                    'sorting' => [
                        'title' => 'asc',
                    ],
                    'fields' => [
                        'title' => [
                            'type' => 'string',
                            'sortable' => NULL,
                            'enabled' => true,
                            'position' => 100,
                            'options' => [

                            ],
                        ],
                        'authorFirstName' => [
                            'type' => 'string',
                            'sortable' => 'author.firstName',
                            'enabled' => true,
                            'position' => 100,
                            'options' => [

                            ],
                        ],
                        'authorLastName' => [
                            'type' => 'string',
                            'sortable' => 'author.firstName',
                            'enabled' => true,
                            'position' => 100,
                            'options' => [

                            ],
                        ],
                    ],
                    'filters' => [
                        'search' => [
                            'type' => 'string',
                            'options' => [
                                'fields' => [
                                    0 => 'title',
                                    1 => 'author.firstName',
                                    2 => 'author.lastName',
                                ],
                            ],
                            'enabled' => true,
                            'position' => 100,
                            'form_options' => [

                            ],
                        ],
                    ],
                    'limits' => [
                        0 => 10,
                        1 => 25,
                        2 => 50,
                    ],
                    'actions' => [

                    ],
                ],
            ],
            'white_october_pagerfanta.default_view' => 'default',
            'sylius.state_machine_component.default' => NULL,
            'console.command.ids' => [
                0 => 'sylius.console.command.resource_debug',
            ],
        ];
    }
}
